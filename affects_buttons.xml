<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="affects_buttons"
   author="Oona"
   id="3a8348c0204a529dc99c2ba8"
   language="Lua"
   purpose="clickable buttons list that changes colors for your affects"
   save_state="y"
   date_written="2025-03-16 13:57:37"
   date_modified="2025-07-15 10:45:00"
   requires="4.71"
   version="2.1"
   >

<description trim="y">

<![CDATA[

Adds a panel you can add buttons to that will perform commands when clicked.
Buttons with an affect associated will be color-coded based on its status
This affect is typically the name of the skill/spell in lower case
Buttons without an affect will just be gray.

You can right-click a button to perform a lot of actions and you can use the
following commands to things as well, such as add buttons.

 * affects add <title> a:<affect> c:<command>
 * affects edit <title> a:<affect> c:<command>
 * affects delete <title>

<title> is what the button will say
<affect> is the affect it will try to track, it can be empty
<command> is the command to send when clicked

Using 'affects add' without any arguments will walk you through it step by step
and using 'affects edit <title>' will walk you through it that way.

 * affects move up <title>
 * affects move down <title>

This will move the button around.

 * affects broadcast <affect>

When this affect is applied we can broadcast it for other plugins to pick it up

  * affects configure

This will open up a configuration window that will let you do all sorts of things.

A lot of these can be done by right clicking as well, also right click to set an
option as a favorite, this will add a button to auto-cast every button you have
marked if it is not casted, about to expire, or doesn't have an affect.

Some notes:

Druid affects are usually translated to non-druid spells that are exclusive so 
having a ring that gives stone skin will still show your invoke ooze as casted

This isn't 100% accurate. Some spells don't fire off events when they expire so
to be certain you are up to date you can view your affects manually at anytime
which will update the buttons

When recasting something before it expires it will try to guess the duration
based on the highest duration it's been casted. This can get weird when you do
something like cast levitation on your horse. It will think it was casted on you
and reset your meter thingy. Manually check affects to fix it.

Examples:

affects add Whirlwind a:whirlwind c:cast whirlwind
affects add Invoke Ooze a:stone skin c:invoke ooze
affects add Summon Mount a: c:cast 'summon mount'


MAKE SURE YOU TURN 'SHOW-AFFECT-SPOILERS' ON IN-GAME!

]]>

</description>

</plugin>

<aliases>

  <alias match="^affects[ ]+add$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>AddButton(nil, nil, nil)</send>
  </alias>

  <alias match="^affects[ ]+add[ ]+(.*?) a\:(.*?) c\:(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>AddButton("%1", "%2", "%3")</send>
  </alias>

  <alias match="^affects[ ]+edit[ ]+(.*?) a\:(.*?) c\:(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>EditButton("%1", "%2", "%3")</send>
  </alias>

  <alias match="^affects[ ]+edit[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>EditButton("%1", nil, nil)</send>
  </alias>

  <alias match="^affects[ ]+delete[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.DeleteButton("%1")</send>
  </alias>

  <alias match="^affects[ ]+rename[ ]+(.*?)[ ]+n:(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.RenameButton("%1", "%2")</send>
  </alias>

  <alias match="^affects[ ]+help$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))</send>
  </alias>

  <alias match="^affects[ ]+move[ ]+up[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.MoveButtonUp("%1")</send>
  </alias>

  <alias match="^affects[ ]+move[ ]+down[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.MoveButtonDown("%1")</send>
  </alias>

  <alias match="^affects[ ]+buttons[ ]+width[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.SetWidth("%1")</send>
  </alias>

  <alias match="^affects[ ]+buttons[ ]+font$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.SetFont()</send>
  </alias>

  <alias match="^affects[ ]+header$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.ToggleHeader()</send>
  </alias>

  <alias match="^affects[ ]+header[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.SetHeaderText("%1")</send>
  </alias>

  <alias match="^affects[ ]+buttons[ ]+lock$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.ToggleLockPosition()</send>
  </alias>

  <alias match="^affects[ ]+stretch$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.ToggleStretchHeight()</send>
  </alias>

  <alias match="^affects[ ]+broadcast[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.ToggleBroadcastAffect("%1")</send>
  </alias>

  <alias match="^affects[ ]+setchar[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>setCharacterName("%1")</send>
  </alias>

  <alias match="^affects[ ]+negative$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>BadAffects.ToggleEnabled()</send>
  </alias>

  <alias match="^affects[ ]+configure$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Configure()</send>
  </alias>

  <alias match="^affects[ ]+cast[ ]+favorites" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons.CastFavorites()</send>
  </alias>
  
  <alias match="^affects[ ]+debug$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Buttons._debug()</send>
  </alias>

  <alias match="^affects[ ]+update$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>checkForUpdates()</send>
  </alias>

</aliases>

<triggers>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^(.*?) knocks (.*?) from your grip\.$">
    <send>DisarmedBroadcast("%2")</send>
  </trigger>

  <trigger enabled="y" name="start_affects" keep_evaluating="y" match="^You are affected by the following\:$" regexp="y" send_to="12" sequence="100">
    <send>
        notify = false
        EnableTriggerGroup("get_affects", true)
        Buttons.ClearMiniWindow()
    </send>
  </trigger>

  <trigger enabled="y" name="stop_affects1" keep_evaluating="y" match="^Total of (.*?) magical and (.*?) non\-magical affects\.$" regexp="y" send_to="12" sequence="100">
    <send>
        EnableTriggerGroup("get_affects", false)
        Buttons.DrawMiniWindow()
        notify = true
    </send>
  </trigger>

  <trigger enabled="y" name="stop_affects2" keep_evaluating="y" match="^Total of (.*?) magical affects\.$" regexp="y" send_to="12" sequence="100">
    <send>
        EnableTriggerGroup("get_affects", false)
        Buttons.DrawMiniWindow()
        notify = true
    </send>
  </trigger>

  <trigger enabled="y" name="stop_affects3" keep_evaluating="y" match="^Total of (.*?) non\-magical affects\.$" regexp="y" send_to="12" sequence="100">
    <send>
        EnableTriggerGroup("get_affects", false)
        Buttons.DrawMiniWindow()
        notify = true
    </send>
  </trigger>

  <!-- casted affects with timer -->

  <trigger enabled="y" group="get_affects" keep_evaluating="n" match="^Spell\:(.*?)\- Level (.*?)\, modifies (.*?) for (.*?) minute(.*?)$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("%1", "%4", false)</send>
  </trigger>  

  <trigger enabled="y" group="get_affects" keep_evaluating="n" match="^Affect\:(.*?)\- Level (.*?)\, modifies (.*?) for (.*?) minute(.*?)$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("%1", "%4", false)</send>
  </trigger>

  <!-- estimate duration when recasted before expiration -->

  <trigger enabled="y" keep_evaluating="n" match="^You have increased the duration of the spell \'(.*?)\'\.$" regexp="y" send_to="12" sequence="100">
    <send>RecastAffect("%1")</send>
  </trigger>
  
  <!-- permanent affects -->

  <trigger enabled="y" group="get_affects" keep_evaluating="y" match="^Spell\:(.*?)\- Level (.*?)\, modifies (.*?)by(.*?).(.*?)$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("%1", "-1", false)</send>
  </trigger>

  <trigger enabled="y" group="get_affects" keep_evaluating="y" match="^Affect\:(.*?)\- Level (.*?)\, modifies (.*?)by(.*?).(.*?)$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("%1", "-1", false)</send>
  </trigger>

  <trigger enabled="y" group="get_affects" keep_evaluating="y" match="^Disease\:(.*?)\- Level (.*?)\, modifies (.*?)by(.*?).(.*?)$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("%1", "-1", false)</send>
  </trigger>

  <!-- removals -->

  <trigger enabled="y" keep_evaluating="y" match="^\[Off\: You lose (.*?)\] (.*?)\.$" regexp="y" send_to="12" sequence="100">
    <send>RemoveAffect("%1")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You are surrounded by an ochre glow as the last vestiges of \'(.*?)\' are burned from your body\.$" regexp="y" send_to="12" sequence="100">
    <send>RemoveAffect("%1")</send>
  </trigger>
  
  <!-- on first prompt -->

  <trigger enabled="y" name="first_prompt" keep_evaluating="y" match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)) $" regexp="y" send_to="12" sequence="100">
    <send>OnFirstPrompt()</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You call your familiar\, and a wary\-looking wolf appears right on cue to join you\.$" regexp="y" send_to="12" sequence="100">
    <send>SetAffect("wolf_familiar", "120")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^There is a slight \*poof\* as an alert wolf vanishes\.$" regexp="y" send_to="12" sequence="100">
    <send>RemoveAffect("wolf_familiar")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You feel relieved as the plague is burned from your body\.$" regexp="y" send_to="12" sequence="100">
    <send>RemoveAffect("plague")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You feel relieved as the poison is burned from your body\.$" regexp="y" send_to="12" sequence="100">
    <send>RemoveAffect("poison")</send>
  </trigger>
</triggers>

<timers>

  <timer name="affects_timer" enabled="y" second="10" offset_second="0.00" send_to="12" active_closed="y">
    <send>
      Buttons.DrawMiniWindow()
    </send>
  </timer>

</timers>

<script>

<![CDATA[

require "gmcphelper"

function tryRequire(required_name, required_remote_url)
  local is_installed, required_ref = pcall(require, required_name)
  if not is_installed then
    local https = require("ssl.https")
    local ltn12 = require("ltn12")
    local response = {}
    local _, dl_res = https.request {
        url = required_remote_url,
        sink = ltn12.sink.table(response)
    }
    if (dl_res == 200) then
      local required_ref_file = table.concat(response):gsub("\r\n", "\n")
      local new_file, res, res_code = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "wb")
      new_file:write(required_ref_file)
      new_file:flush()
      new_file:close()
      is_installed, required_ref = pcall(require, required_name)
    end
  end

  if not is_installed then
    ColourNote("red" , "black", "Could not get download '".. required_name .. ".lua' from github. Get it manually, reinstall, and try again.")
  end

  return is_installed, required_ref
end

buttons_installed, Buttons = tryRequire("affectsbuttons_miniwindow", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/affectsbuttons_minimindow.lua")
config_installed, Configuration = tryRequire("configuration_miniwindow", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/configuration_miniwindow.lua")

local CHARACTER_NAME

notify = true

-----------------
-- plugin stuff
-----------------

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
  if not buttons_installed or not config_installed then 
    ColourNote("black", "red", "You do not have the required files in your lua directory. Expect issues.") 
  end

  EnableTrigger("first_prompt", true)
  EnableTriggerGroup("get_affects", false)
  Buttons.PrepareMiniWindow()
end

function OnPluginEnable()
  CHARACTER_NAME = nil
  EnableTriggerGroup("get_affects", false)
  EnableTrigger("first_prompt", true)
  Buttons.PrepareMiniWindow()
end

function OnPluginConnect()
  CHARACTER_NAME = nil
  EnableTriggerGroup("get_affects", false)
  EnableTrigger("first_prompt", true)
  Buttons.PrepareMiniWindow()
end

function OnPluginClose()
  Buttons.CloseMiniWindow()
  Configuration.Hide()
end

function OnPluginDisable()
  Buttons.CloseMiniWindow()
  Configuration.Hide()
end

function OnPluginSaveState()
  Buttons.SaveMiniWindow()
end

function OnPluginDisconnect()
  checkForUpdates()
end

function OnFirstPrompt()
  EnableTrigger("first_prompt", false)
  Execute("sendgmcp char.base")
end

function setCharacterName(name)
  if name == nil or name == "" then
    Note("Unknown character name, set with 'affects setchar <name>'") 
  else
    CHARACTER_NAME = name
    
    Buttons.InitializeMiniWindow(name)
    
    if Buttons.CURRENT_AFFECTS == nil then
      Send("affects")
    end
  end
end

-----------------
-- affects dict
-----------------

function SetAffect(affect, time_str, refresh)
  local parsed_affect = ParseAffect(affect)
  local converted_time = tonumber(time_str or 0) or 0  
  Buttons.SetAffect(parsed_affect, converted_time, notify, refresh)
end

function RecastAffect(affect)
  local parsed_affect = ParseAffect(affect)
  local est_duration = Buttons.GetDuration(parsed_affect)
  if est_duration ~= nil then
    local converted = est_duration / 60 * 4
    local converted_str = tostring(converted)
    SetAffect(affect, converted_str, notify)
  end
end

function RemoveAffect(affect)
  local parsed_affect = ParseAffect(affect)
  Buttons.RemoveAffect(parsed_affect, notify)
end

function DisarmedBroadcast(weapon)
  BroadcastPlugin(1, "!!! YOU WERE DISARMED! RE-EQUIP " .. weapon:upper() .. " !!!")
end

function AddButton(title, affect, command)
  if affect ~= nil then affect = ParseAffect(affect) end
  Buttons.AddButton(title, affect, command)
end

function EditButton(title, new_affect, new_command)
  if new_affect ~= nil then new_affect = ParseAffect(new_affect) end
  Buttons.EditButton(title, new_affect, new_command)
end

function ParseAffect(affect)
  affect = affect:match("^%s*(.-)%s*$"):lower()

  if affect == "ice invocation" or affect == "force field" then
    affect = "shield"

  elseif affect == "ooze invocation" then
    affect = "stone skin"
  
  elseif affect == "steam invocation" or affect == "wind walk" then
    affect = "pass door"

  elseif affect == "magma invocation" or affect == "frostborne" then
    affect = "fireshield"
  
  elseif (affect == "guise of nature") then
    affect = "armor"
  
  elseif affect == "whirlwind" or affect =="lightning invocation" or affect == "zeal" then
    affect = "haste"
  
  elseif affect == "disrupt sight" or affect == "flare" or affect == "color spray" or affect == "smoke evocation" then
    affect = "blindness"
  
  elseif affect == "mesmerize" or affect == "earth evocation" then
    affect = "web"

  elseif affect == "air invocation" or affect == "float" then
    affect = "levitation"

  elseif affect == "irritation" then
    affect = "plague"
  end

  return affect
end

---------------
-- Configuration
---------------

function Configure()
  Configuration.Show(Buttons.GetConfiguration(), Buttons.SaveConfiguration)
end

function Serialize(table)
  local function serializeValue(value)
    if type(value) == "table" then
      return Serialize(value)
    elseif type(value) == "string" then
      return string.format("%q", value)
    else
      return tostring(value)
    end
  end

  local result = "{"
  for k, v in pairs(table) do
    local key
    if type(k) == "string" and k:match("^%a[%w_]*$") then
      key = k
    else
      key = "[" .. serializeValue(k) .. "]"
    end
    result = result .. key .. "=" .. serializeValue(v) .. ","
  end
  result = result .. "}"
  return result
end

---------------
-- GMCP stuff
---------------

function OnPluginBroadcast(msg, id, name, text)
  if (id == "f67c4339ed0591a5b010d05b") then -- GMCP message
    if (text == "char.affect_application_msg") then
      HandleGmcpAdd()
    elseif (text == "char.affect_removal_msg") then
      HandleGmcpRemove()
    elseif (text == "char.base") then
      HandleGmcpCharacterBase()
    end
  end
end

function HandleGmcpAdd()
  GetGmcpAffectApplication()
  who = gmcpval("target")
  spell = gmcpval("skill"):lower()
  duration = gmcpval("duration")
  handleGmcpAffect(who, spell, true, duration)
end

function HandleGmcpRemove()
  GetGmcpAffectApplication()
  who = gmcpval("target")
  spell = gmcpval("skill"):lower()
  handleGmcpAffect(who, spell, false, 0)
end

function HandleGmcpCharacterBase()
  if CHARACTER_NAME == nil or CHARACTER_NAME == "" then
    local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char.base")
    luastmt = "gmcpdata = " .. gmcparg
    assert(loadstring(luastmt or ""))()
    local name = gmcpval("name")
    setCharacterName(name)
  end
end

function GetGmcpAffectApplication()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char.affect_application_msg")
  luastmt = "gmcpdata = " .. gmcparg
  assert(loadstring(luastmt or ""))()
end

function handleGmcpAffect(who, spell, isOn, duration)
  if show_debug then Note("affects_buttons debug: gmcp for '" .. who .. "' for '" .. spell .. "'") end
  if (who == "you") then
    if (isOn) then
      SetAffect(spell, tonumber(duration or 0))
    else
      RemoveAffect(spell)
    end
  end
end

function checkForUpdates()
  local updater_installed, updater = tryRequire("updatehelper", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/updatehelper.lua")

  if updater_installed then
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/affects_buttons.xml" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/affectsbuttons_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/affectsbuttons_miniwindow.lua"},
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/badaffects_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/badaffects_miniwindow.lua"},
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/configuration_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/configuration_miniwindow.lua" },
    })
  end
end

]]>

</script>

</muclient>
