<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="capture_quests"
   author="Oona"
   id="892911b648d09c18e1ecd4e6"
   language="Lua"
   purpose="show quest details in new capture tab"
   save_state="y"
   date_written="2025-06-04 18:38:09"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

<![CDATA[

]]>

</description>

</plugin>

<aliases>

  <alias enabled="y" match="^capture quest remove (.*?)$" regexp="y" send_to="12" sequence="100">
    <send>removeQuest("%1")</send>
  </alias>

  <alias enabled="y" match="^q(|uest) hint (.*?)$" regexp="y" send_to="12" sequence="100">
    <send>showHint("%2")</send>
  </alias>

  <alias enabled="y" match="^quest aban(|don) (.*?)$" regexp="y" send_to="12" sequence="100">
    <send>
      Send("quest abandon %2")
      clearWindow()
    </send>
  </alias>

  <alias enabled="y" match="^q(|uest) time((r)?s)?$" regexp="y" send_to="12" sequence="100">
    <send>ShowTimes()</send>
  </alias>

  <alias enabled="y" match="^capture quest clear$" regexp="y" send_to="12" sequence="100">
    <send>clearWindow()</send>
  </alias>

  <alias enabled="y" match="^capture pursuer clear$" regexp="y" send_to="12" sequence="100">
    <send>SetPursuerTarget()</send>
  </alias>

  <alias enabled="y" match="^capture crystal clear$" regexp="y" send_to="12" sequence="100">
    <send>SetCrystalTarget()</send>
  </alias>

  <alias enabled="y" match="^capture quest debug$" regexp="y" send_to="12" sequence="100">
    <send>debug()</send>
  </alias>

</aliases>

<triggers>

  <trigger enabled="y" keep_evaluating="y" name="capture_name" match="^This quest \[(.*?)\] is called \'(.*?)\'\,$" regexp="y" send_to="14" sequence="100">
    <send>captureStart("%1", "%2")</send>
  </trigger>

  <trigger enabled="n" keep_evaluating="y" name="capture_name_refresh" match="^This quest \[(.*?)\] is called \'(.*?)\'\,$" regexp="y" omit_from_output="y" sequence="100">
  </trigger>

  <trigger match="*" keep_evaluating="y" name="capture_line" send_to="14" sequence="100">
    <send>captureLine("%0")</send>
  </trigger>

  <trigger enabled="n" keep_evaluating="y" name="capture_line_refresh" match="*" omit_from_output="y" sequence="100">
  </trigger>

  <trigger match="^$" keep_evaluating="y" name="capture_end" regexp="y" send_to="14" sequence="100">
    <send>captureEnd()</send>
  </trigger>  

  <trigger enabled="y" keep_evaluating="y" expand_variables="y" match="^(.*?) tells you\, \'Congratulations on the completion of thy quest\, (.*?)$" regexp="y" send_to="12" sequence="100">
    <send>
      clearWindow()
      SetQuestTime()
    </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You have run out of time for your quest\, (.*?)\.$" regexp="y" send_to="12" sequence="100">
    <send>clearWindow() </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You have abandoned quest (.*?)\.$" regexp="y" send_to="12" sequence="100">
    <send>clearWindow() </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You have completed a part of quest \#(.*?)\, \'(.*?)\'\!$" regexp="y" send_to="12" sequence="100">
    <send>refreshQuest("%1") </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^All parts of your quest (.*?) are complete\." regexp="y" send_to="12" sequence="100">
    <send>refreshQuest() </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" omit_from_output="y" match="^  Spell Points\:(.*?)Quest Points\:(.*?)$" regexp="y" send_to="14" sequence="100">
    <send>replaceQuestTime("%1", "%2")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\'Thank you\, (.+)\!\' Tadamir the guildsman exclaims to you\. \'Here is your reward\, as promised\.\'$" regexp="y" send_to="12" sequence="100">
    <send>
      SetCrystalTarget()
      SetCrystalTime()
    </send>
  </trigger>

  <trigger enabled="y" match="^\'Ekai Nosrat Sulla Garha \&quot;(.+?)\&quot;\, Setama Sulla \&quot;(.+?)\&quot;\, Ekass Armas Thran Bel Dinas\.\' the orc pursuer says(| to you)\. \'Nohsa Sulla Amata\.\'$" regexp="y" send_to="12" sequence="100">
    <send>SetPursuerTarget("%1 (%2)")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^The orc pursuer gives you (.+)\.$" regexp="y" send_to="12" sequence="100">
    <send>
      SetPursuerTarget()
      SetPursuerTime()
    </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You give the carcass of a captive dodo to an orc woman\.$" regexp="y" send_to="12" sequence="100">
    <send>
      SetPursuerTarget()
      SetPursuerTime()
    </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" multi_line="y" lines_to_match="23" regexp="y" send_to="12" sequence="100"
    match="It looks like this map depicts(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n(.*?)\n">
    <send>locateCrystal("%2\\r\\n%3\\r\\n%4\\r\\n%5\\r\\n%6\\r\\n%7\\r\\n%8\\r\\n%9\\r\\n%&lt;10&gt;\\r\\n%&lt;11&gt;\\r\\n%&lt;12&gt;\\r\\n%&lt;13&gt;\\r\\n%&lt;14&gt;\\r\\n%&lt;15&gt;\\r\\n%&lt;16&gt;\\r\\n%&lt;17&gt;\\r\\n%&lt;18&gt;\\r\\n%&lt;19&gt;\\r\\n%&lt;20&gt;\\r\\n%&lt;21&gt;\\r\\n%&lt;22&gt;")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You take a (blood|small) crystal\.$" sequence="100" send_to="10">
    <send>Execute("imap crystal off")</send>
  </trigger>

  <trigger enabled="y" match="^\* You may ask Tadamir for another map at\: (.*?)$" omit_from_output="y" regexp="y" send_to="14" sequence="100">
    <send>replaceCrystalTime("%1")</send>
  </trigger>

  <trigger enabled="y" name="capture_time_offset" match="^The current system time is\: (.*?)\.$" regexp="y" send_to="12" sequence="100">
    <send>setOffset("%1")</send>
  </trigger>

</triggers>

<script>

<![CDATA[

function ensureRequired(required_name, required_remote_url, should_return)
  local existing_file = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "r")
  if not existing_file then
    local https = require("ssl.https")
    local ltn12 = require("ltn12")
    local response = {}
    local _, dl_res = https.request {
        url = required_remote_url,
        sink = ltn12.sink.table(response)
    }
    if (dl_res == 200) then
      local required_ref_file = table.concat(response):gsub("\r\n", "\n")
      local new_file, res, res_code = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "wb")
      new_file:write(required_ref_file)
      new_file:flush()
      new_file:close()
    end
  end

  if should_return then 
    return pcall(require, required_name)
  end
end

ensureRequired("quest_miniwindow", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/quest_miniwindow.lua", false)
ensureRequired("questsearcher", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/questsearcher.lua", false)

require "quest_miniwindow"
require "questsearcher"

local quest_num
local quest_phases
local refreshing = false
local hour_offset = 1

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
  InitializeMiniWindow()
end

function OnPluginEnable()
  clearMiniWindow()
end

function OnPluginConnect()
  local offset = GetVariable("hour_offset")
  if offset == nil then
    DoAfterSpecial(1, "tryGetOffset()", sendto.script)
  else

  end
end

function tryGetOffset()
  Note("Sending time to get hour offset from server...")
  Send("time")
end

function OnPluginClose()
  SaveState()
  hideWindow()
end

function OnPluginDisable()
  SaveState()
  hideWindow()
end

function OnPluginDisconnect()
  checkForUpdates()
end

function OnPluginSaveState()
  if INIT then
    movewindow.save_state(GetPluginID())
  end
end

function captureStart(num, name)
  if string.find(string.lower(name), "daily quest", 1, true) ~= nil or
     string.find(string.lower(name), "weekly quest", 1, true) ~= nil or
     string.find(string.lower(name), "archon meta", 1, true) ~= nil then
    clearMiniWindow()
    return
  end

  EnableTrigger("capture_line", true)
  EnableTrigger("capture_end", true)

  if refreshing then
    EnableTrigger("capture_line_refresh", true)
  end

  clearMiniWindow()
  
  addToLine("Quest ", "springgreen", "black", "quest" .. num, true)
  addToLine("[", "blue", "black", "quest" .. num, true)
  addToLine(num, "springgreen", "black", "quest" .. num, true)
  addToLine("] ", "blue", "black", "quest" .. num, true)
  addToLine(name, "springgreen", "black", "quest" .. num, true)
  addNewLine("quest" .. num, true)

  if quest_num ~= num then
    quest_num = num;
    quest_phases = getQuestInfo(num, name)
  end
end

function captureLine(line)
  if (string.find(string.lower(line), string.lower("phase"), 1, true) ~= nil and string.find(string.lower(line), string.lower("metaquest"), 1, true) == nil) then
    local split = utils.split(line, ":")
    local section = split[1]
    addToLine(section, "cyan", "black", section, true)

    local color = "silver"
    local phase_text = Trim(split[2])
    local counter = ""
    if string.sub(phase_text, 1, 1) == "[" then
      local counterEnd = string.find(phase_text, "]")
      counter = string.sub(phase_text, 1, counterEnd + 1)
    end

    phase_text = phase_text:gsub("%b[]", ""):gsub("%.", ""):gsub("%s+", " "):gsub("^%s+", ""):gsub("%s+$", "")

    if string.sub(phase_text, 1, 1) == "*" then
      phase_text = string.sub(phase_text, 2, #phase_text)
      color = "dimgray"
    end

    phase_text = counter .. phase_text

    addToLine(phase_text, color, "black", section, true)
    addNewLine(section, true)
    if color ~= "dimgray" and quest_phases ~= nil then
      for i, phase in ipairs(quest_phases) do
        local check = Trim(phase.text:lower():gsub(" and keep", ""))
        local one = Trim(phase_text:lower():gsub(" and keep", ""))
        local two = Trim(string.sub(check, 1, #check - 1))
        if one == two then
          for _, item in ipairs(phase.items) do
            displayMultiParts(item, section)
          end
          for _, mob in ipairs(phase.mobs) do
            displayMultiParts(mob, section)
          end
          for _, room in ipairs(phase.rooms) do
            displayMultiParts(room, section)
          end
        end
      end
    end
  end
end

function displayMultiParts(line, section)
  local multi = string.find(line, "],")
  if multi == nil then
    addToLine("  - " .. line, "silver", "black", section, false)
    addNewLine(section, false)
  else
    addToLine("  - " .. line:sub(1, multi), "silver", "black", section, false)
    addNewLine(section, false)
    displayMultiParts(" or " .. line:sub(multi + 3, #line), section)
  end
end

function captureEnd()
  refreshing = false

  EnableTrigger("capture_line", false)
  EnableTrigger("capture_end", false)

  EnableTrigger("capture_name_refresh", false)
  EnableTrigger("capture_line_refresh", false)
end

function clearWindow()
  clearMiniWindow()
end

function removeQuest(quest_id)
  local removed = removeQuestFromDb(tonumber(quest_id))
  if removed then
    clearWindow()
    Note("Quest has been removed from the database, check quest status to retrieve it again.")
  else
    Note("Unable to remove from db.")
  end
end

function refreshQuest(quest_id)
  if isSilentRefreshEnabled() then
    refreshing = true
    EnableTrigger("capture_name_refresh", true)
    if quest_id == nil then quest_id = quest_num end
    SendNoEcho("quest status " .. quest_id)
  end
end

function showHint(phase_num)
  local shown = false
  local phase = quest_phases[tonumber(phase_num)]
  if phase ~= nil and phase.hints ~= nil then
    for _, hint in ipairs(phase.hints) do
      if hint ~= nil and hint ~= "" then
        shown = true
        Note(hint)
      end
    end
  end
  
  if not shown then
    Note("No hints available for this phase.")
  end
end

function addToLine(txt, text_color, back_color, section, is_header)
  if (not styles) then
    styles = {}
  end

  if (txt == "\r\n") then
    AddLine(styles, section, is_header)
    styles = {}
  else
    if back_color == nil then back_color = "black" end
    styles[#styles + 1] = {
      text = txt,
      textcolour = ColourNameToRGB(text_color),
      backcolour = ColourNameToRGB(back_color)
    }
  end
end

function addNewLine(section, is_header)
  addToLine("\r\n", "silver", "black", section, is_header)
end

function locateCrystal(location)
  doCrystalLoop(location)
  EnableTrigger("findcrystal", false)
end

function doCrystalLoop(location)
  if location == nil or #location == 0 then
    return
  end

  local http = require "socket.http"

  page, retcode, header = http.request("http://mmatlas.dune.net/find-crystal-guild-vi.pl","map=".. location)
  
  if (retcode == 200) then
    coords_start = string.find(page, "(", 0, true)

    if (coords_start ~= nil) then
      coords_end = string.find(page, ")", 0, true)
      crystal = string.sub(page, coords_start + 1, coords_end - 1)

      Note("The crystal is located at ".. crystal)
      SetCrystalTarget(crystal)
      Execute("imap crystal " .. crystal)
    else
      local map_tab = split(location)
      if #map_tab < 2 then
        Note("Ran out attempts: " .. page)
      else
        local map_next = table.concat(map_tab, "\r\n", 2, #map_tab - 1)
        doCrystalLoop(map_next)
      end
    end

  else
    Note("error accessing MagicMap - code: " .. retcode)
  end
end

function replaceCrystalTime(time_str)
  local converted_time, year, month, day, hour, minute, second = convertToTime(time_str)
  local details = getTimeDiff(converted_time)
  local formatted_date = getFormattedDateTime(year, month, day, hour, minute, second)
  ColourNote("lightgray", "black", "* You may ask Tadamir for another map " .. details .. " (" .. formatted_date .. ")")
end

function replaceQuestTime(sp, qp)
  local details = "NOW!"
  if TIMES ~= nil and TIMES.QUEST_TIME ~= nil then
    details = getTimeDiff(TIMES.QUEST_TIME)
  end
  ColourNote("lightgray", "black", "  Spell Points:" .. sp .. "Quest Points:" .. qp .. " [" .. details .. "]")
end

function getTimeDiff(input_time)
  local details = "NOW!"
  local differenceInSeconds = input_time - os.time()
  if differenceInSeconds > 0 then
      local diff_minutes = math.floor(differenceInSeconds / 60)
      details = "in " .. diff_minutes .. " minutes"
  end

  return details
end

function getFormattedDateTime(year, month, day, hour, minute, second)
  local ampm = "am"
  if (hour == 24) then hour = 0 end
  if (hour > 11) then ampm = "pm" end
  if (hour == 0) then hour = 12 end 
  if (hour > 12) then hour = hour - 12 end

  local formatMinute = ""
  if (minute < 10) then
    formatMinute = "0"
  end

  return month .. "/" .. day .. "/" .. year .. " " .. hour .. ":" .. formatMinute .. minute .. " " .. ampm
end

function convertToTime(time_str)
  local month_map = {
      Jan = 1, Feb = 2, Mar = 3, Apr = 4, May = 5, Jun = 6,
      Jul = 7, Aug = 8, Sep = 9, Oct = 10, Nov = 11, Dec = 12
  }

  local day = tonumber(time_str:sub(9, 10))
  local hour = tonumber(time_str:sub(12, 13))
  local minute = tonumber(time_str:sub(15, 16))
  local second = tonumber(time_str:sub(18, 19))
  local year = tonumber(time_str:sub(22, 25))

  local month_str = time_str:sub(5, 7)
  local month = month_map[month_str]

  hour = hour + hour_offset;

  local provided_time = os.time {
      year = year + 2000,
      month = month,
      day = day,
      hour = hour,
      min = minute,
      sec = second,
  }

  return provided_time, year, month, day, hour, minute, second
end

function setOffset(time_str)
  EnableTrigger("capture_time_offset", false)

  local input_time, year, month, day, hour, minute, second = convertToTime(time_str)
  local offset_seconds = os.difftime(input_time, os.time())
  local offset_hours = math.floor(offset_seconds / 3600 + 0.5)
  hour_offset = tonumber(offset_hours)
  SetVariable("hour_offset", hour_offset)
  SaveState()
end

function split(str)
  local result = {}
  for line in string.gmatch(str, "[^\r\n]+") do
    table.insert(result, line)
  end
  return result
end

function checkForUpdates()
  local updater_installed, updater = ensureRequired("updatehelper", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/updatehelper.lua", true)

  if not updater_installed then
    ColourNote("red" , "black", "Could not get download 'updatehelper.lua' from github. Get it manually, reinstall, and try again.")
  else
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/capture_quest.xml" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/quest_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/quest_miniwindow.lua" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/questsearcher.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/questsearcher.lua" }
    })
  end
end

]]>

</script>

</muclient>
