<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="goto_aliases"
   author="Oona"
   id="53d6e7a37b664265be58ab00"
   language="Lua"
   purpose="aliases to goto places you are in"
   save_state="y"
   date_written="2025-03-15 17:23:48"
   requires="4.71"
   version="1.0">

<description trim="y">

<![CDATA[

Aliases to get you where you wanna go. Takes into account your current location.

Auto run to the exit of the city you are in:

 * goto <north|east|south|west>

 Won't do anything if you try to go to an exit that doesn't exist.

Go to the next logical city when you are outside an exit:

 * goto next

 This is subjective, but mostly obvious. Rune east to New Rigel, west to Xav, etc.

Go to the quest master if there is one:

 * goto qm

Go to the tourist rep if there is one:

 * goto rep

 It will try to say yes to the rep if you are already there.

Go to the crystal quest office in Rune:

 * goto crystal

 If you are already there it will buy the first map for you.
 If you aren't in Rune it will to "run rune"

Go to the orc pursuer in wroth:
  
  * goto pursuer

  Run to the pursuer if you can, there will be some convenient links to click.
  
]]>

</description>

</plugin>

<aliases>

<alias match="^goto[ ]+debug$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doDebug()</send>
</alias>

<alias match="^goto[ ]+north$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doNorthGate()</send>
</alias>

<alias match="^goto[ ]+south$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doSouthGate()</send>
</alias>

<alias match="^goto[ ]+west$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doWestGate()</send>
</alias>

<alias match="^goto[ ]+east$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doEastGate()</send>
</alias>

<alias match="^goto[ ]+next$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doNextCity()</send>
</alias>

<alias match="^goto[ ]+qm$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doQuestMaster()</send>
</alias>

<alias match="^goto[ ]+rep$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doTownRep()</send>
</alias>

<alias match="^goto[ ]+crystal$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doCrystal()</send>
</alias>

<alias match="^goto[ ]+pursuer$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>doPursuer()</send>
</alias>

<alias match="^goto[ ]+cancel$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>cancelGoto()</send>
</alias>

<alias match="^goto[ ]+help$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))</send>
</alias>

<alias match="^run newr(i(g(e(l)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run newrigel")</send>
</alias>

<alias match="^run di(o(c(l(e(t(i(a(n)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run diocletian")</send>
</alias>

<alias match="^run x(a(v(e(n(t(r(y)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run xaventry")</send>
</alias>

<alias match="^run a(v(a(r(i(c(e)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run avarice")</send>
</alias>

<alias match="^run des(e(r(t(t(h(o(r(n)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run desertthorn")</send>
</alias>

<alias match="^run gi(l(v(e(r(y)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run gilvery")</send>
</alias>

<alias match="^run la(s(l(e(r)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run lasler")</send>
</alias>

<alias match="^run low(a(n(g(e(n)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run lowangen")</send>
</alias>

<alias match="^run ma(n(d(r(a(k(e)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run mandrake")</send>
</alias>

<alias match="^run newk(o(l(v(i(r)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run newkolvir")</send>
</alias>

<alias match="^run runef(o(r(e(s(t)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run runeforest")</send>
</alias>

<alias match="^run to(w(e(r(o(f(a(r(t)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run towerofart")</send>
</alias>

<alias match="^run wr(o(t(h)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run wroth")</send>
</alias>

<alias match="^run tw(i(n(m(o(o(n(s)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run twinmoons")</send>
</alias>

<alias match="^run h(i(l(l(g(i(a(n(t(s)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run hillgiants")</send>
</alias>

<alias match="^run tr(a(v(e(l(e(r(s(r(e(t(r(e(a(t)?)?)?)?)?)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run travelersretreat")</send>
</alias>

<alias match="^run lon(e(l(y(d(r(a(g(o(n)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run lonelydragon")</send>
</alias>

<alias match="^run j(o(i(n(t(m(a(g(i(c(c(o(n(s(o(r(t(i(u(m)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run jointmagicconsortium")</send>
</alias>

<alias match="^run jmc$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run jointmagicconsortium")</send>
</alias>

<alias match="^run ta(v(e(r(n(o(f(t(h(e(b(o(a(r(s)?)?)?)?)?)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run tavernoftheboars")</send>
</alias>

<alias match="^run em(p(e(r(o(r(s(c(r(o(s(s(r(o(a(d)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run emperorscrossroads")</send>
</alias>

<alias match="^run ec$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run emperorscrossroads")</send>
</alias>

<alias match="^run vo(s(p(i(r(e)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run vospire")</send>
</alias>

<alias match="^run tel(l(e(r(i(u(m)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run tellerium")</send>
</alias>

<alias match="^run tem(p(l(e(t(o(n)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run templeton")</send>
</alias>

<alias match="^run do(r(a(t(h(o(n)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run dorathon")</send>
</alias>

<alias match="^run wi(n(t(o(n)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run winton")</send>
</alias>

<alias match="^run k(e(e(p)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run keep")</send>
</alias>

<alias match="^run dec(e(i(t)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run deceit")</send>
</alias>

<alias match="^run va(n(d(e(m(a(a(r)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run vandemaar")</send>
</alias>

<alias match="^run x(a(l(t)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run xalt")</send>
</alias>

<alias match="^run mu(l(a(k(a(n(a(t(h(o(s)?)?)?)?)?)?)?)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run mulakanathos")</send>
</alias>

<alias match="^run go(r(t(h)?)?)?$" enabled="y" regexp="y" send_to="12" sequence="100">
  <send>Send("run gorth")</send>
</alias>

</aliases>

<triggers>

<trigger enabled="y" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^(.*?) savage\-looking orc stands here\, his every limb chained to the wall\.$">
  <send>
    Tell("Orc Pursuer: ")
    Hyperlink("!!" .. GetPluginID() .. ":getPursuerTarget()", "[get target]", "", "silver", "black", false)
    Tell(" - ")
    Hyperlink("give head orc", "[give head orc]", "", "silver", "black", false)
    Tell(" - ")
    Hyperlink("give leg orc", "[give leg orc]", "", "silver", "black", false)
    Tell(" - ")
    Hyperlink("give arm orc", "[give arm orc]", "", "silver", "black", false)
  </send>
</trigger>

<trigger enabled="y" name="first_prompt" keep_evaluating="y" match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)) $" regexp="y" send_to="12" sequence="100">
  <send>OnFirstPrompt()</send>
</trigger>

</triggers>

<script>

<![CDATA[

require "gmcphelper"
require "serializationhelper"

local init = false
local running_to_pursuer = false

locations = {
    rune = { north = "10435", south = "2832529", east = "2816440", west = "2809518", qm = "31323", rep = nil },
    sigil = { north = "3881069", south = "3908670", east = nil, west = nil, qm = "28450", rep = "27890" },
    newrigel = { north = "2315135", south = "2358832", east = nil, west = nil, qm = "62566", rep = "62036" },
    xaventry = { north = "2066541", south = "2105636", east = "2084947", west = "2087227", qm = "73968", rep = "73100" },
    tellerium = { north = "2638058", south = "2656450", east = nil, west = nil, qm = "41852", rep = "41790" },
    templeton = { north = "47337", south = nil, east = nil, west = "2309054", qm = "47421", rep = nil },
    piratescove = { north = "3288425", south = "3318326", east = "3295329", west = "3304508", qm = nil, rep = nil },
    vospire = { north = nil, south = nil, east = "3765964", west = "3768246", qm = nil, rep = nil },
    diocletian = { north = nil, south = "4189387", east = nil, west = nil, qm = nil, rep = nil },
    lowangen = { north = nil, south = "2030293", east = nil, west = nil, qm = nil, rep = nil },
    maldra = { north = nil, south = "3573738", east = nil, west = nil, qm = "67947", rep = nil },
    thorn = { north = nil, south = nil, east = "1807082", west = "1788665", qm = nil, rep = nil},
    decara = { north = nil, south = nil, east = "11125213", west = nil, qm = "116546", rep = nil},
    vir = { north = nil, south = nil, east = "12426873", west = nil, qm = nil, rep = nil},
    gilvery = { north = nil, south = nil, east = "1880596", west = "1880584", qm = nil, rep = nil},
    desertthorn = { north = nil, south = nil, east = "1807082", west = "1788665", qm = nil, rep = nil }
}

taverns = {
  travelersretreat = "2558911",
  tavernoftheboars = "2085131",
  twinmoons = "1765641",
  lonelydragon = "2669134"
}

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
  Note("")
  Note(" > Added aliases for: goto <direction>, goto qm, goto rep, goto crystal, and goto pursuer")
  Note(" > See goto help for more information!")
  Note("")
end

function OnPluginDisconnect()
  checkForUpdates()
end

function OnFirstPrompt()
  init = true
end

function OnPluginBroadcast(msg, id, name, text)
  if (id =="f67c4339ed0591a5b010d05b") then
    if (text == "room.info") then
      if running_to_pursuer then
        handleRunningToPursuer(false)
      end
    end
  end
end

function doDebug() -- Debug
    get_gmcp_room()
    local num = gmcpval("num")
    local zone = gmcpval("zone")
    Note(zone .. " (" .. num .. ")")
end

function getZoneKey()
    get_gmcp_room()
    local zone = gmcpval("zone")
    local room = gmcpval("num")

    if (isRune(zone, room)) then
        return "rune"
    elseif (isSigil(zone, room)) then
        return "sigil"
    elseif (isNewRigel(zone, room)) then
        return "newrigel"
    elseif (isXaventry(zone, room)) then
        return "xaventry"
    elseif (isTellerium(zone, room)) then
        return "tellerium"
    elseif (isTempleton(zone, room)) then
        return "templeton"
    elseif (isPiratesCove(zone, room)) then
        return "piratescove"
    elseif (isVospire(zone, room)) then
        return "vospire"
    elseif (isDiocletian(zone, room)) then
        return "diocletian"
    elseif (isLowangen(zone, room)) then
        return "lowangen"
    elseif (isMaldra(zone, room)) then
        return "maldra"
    elseif (isDesertThorn(zone, room)) then
        return "thorn"
    elseif (isDecara(zone, room)) then
        return "decara"
    elseif (isVir(zone, room)) then
        return "vir"
    else
        Note("Unknown zone: " .. zone .. " (room: " .. room .. ")")
        return nil
    end
end

function getDestinationRoom(destination)
    local zone_key = getZoneKey()
    if (zone_key ~= nil) then
        local room_number = locations[zone_key][destination]
        if (room_number ~= nil) then
            return room_number
        end
    end

    return nil
end

function doLocation(destination)
  local room_number = getDestinationRoom(destination)
  if (room_number ~= nil) then
    Execute("mapper goto " .. room_number)
  else
    Note("There is no " .. destination .. " for this location.")
  end
end

function doNorthGate() -- North Gate
  doLocation("north")    
end

function doSouthGate() -- South Gate
    doLocation("south")
end

function doWestGate() -- West Gate
    doLocation("west")
end

function doEastGate() -- East Gate
    doLocation("east")
end

function doQuestMaster() -- Quest Master
  local room_number = getDestinationRoom("qm")
  if (room_number ~= nil) then
    local current_room_number = gmcpval("num")
    if (current_room_number == room_number) then
      Send("quest request 'rewarding'")
    else
      Execute("mapper goto " .. room_number)
    end
  else
    Note("There is no quest master for this location.")
  end
end

function doTownRep() -- Daily Lady
  local room_number = getDestinationRoom("rep")
  if (room_number ~= nil) then
    local current_room_number = gmcpval("num")
    if (current_room_number == room_number) then
      Send("sayto representative yes")
    else
      Execute("mapper goto " .. room_number)
    end
  else
    Note("There is no town rep for this location.")
  end
end

function doNextCity() -- Next City
    get_gmcp_room()
    local num = gmcpval("num")

    if num == locations["rune"]["east"] then
      Send("run newrigel")
    elseif num == locations["rune"]["west"] then
      Send("run xaventry")
    elseif num == locations["sigil"]["south"] then
      Send("run diocletian")
    elseif num == locations["sigil"]["north"] then
      Send("run vospire")
    elseif num == locations["piratescove"]["west"] or
           num == locations["piratescove"]["east"] or
           num == locations["piratescove"]["south"] then
      Send("run keep")
    elseif num == locations["newrigel"]["south"] or
           num == locations["xaventry"]["south"] then
      Send("run rune")
    elseif num == locations["newrigel"]["north"] then
      Send("run wroth")
    elseif num == locations["tellerium"]["north"] then
      Send("run templeton")
    elseif num == locations["templeton"]["west"] then
      Send("run tellerium")
    elseif num == locations["diocletian"]["south"] or
           num == locations["vospire"]["east"] then
      Send("run sigil")
    elseif num == locations["vospire"]["west"] then
      Send("run vesuvius")
    elseif num == locations["maldra"]["south"] then
      Send("run pc")
    elseif num == locations["decara"]["east"] then
      Send("run vir")
    elseif num == locations["vir"]["east"] then
      Send("run decara")
    elseif num == "1960870" then -- wroth
      Send("run newrigel")
    else
        Note("You are not in an expected room!")
    end
end

function doCrystal() -- Crystal Quests
  get_gmcp_room()
  local zone = gmcpval("zone")
  local room = gmcpval("num")

  if isRune(zone, room) then
    if room == "10407" then
      Send("shop buy 1")
    else
      Execute("mapper goto 10407")
    end
  elseif zone == "Alyria" then
      Send("run rune")
  elseif isXaventry(zone, room) then
    Execute("mapper goto " .. locations["xaventry"]["south"])
  elseif isNewRigel(zone, room) then
    Execute("mapper goto " .. locations["newrigel"]["south"])
  end
end

function doPursuer() -- Orc Pursuer
  running_to_pursuer = true
  handleRunningToPursuer(true)
end

function handleRunningToPursuer(initial)
  if not running_to_pursuer then return end

  if initial and room == "7461" then
    -- todo: track if you have the part to turn in
    getPursuerTarget()
    running_to_pursuer = false
    return
  end
  
  Note("Running to the Orc Pursuer. Type 'goto cancel' to stop when the current leg completes.")  

  get_gmcp_room()
  local zone = gmcpval("zone")
  local room = gmcpval("num") 
  
  if zone == "Dungeon Wroth" or room == "1960870" then -- or outside wroth
    if room == "7682" then
      Send("enter portal")
      Send("south")
      running_to_pursuer = false
    elseif initial or room == "1960870" then
      Execute("mapper goto 7682")
    end
  elseif zone == "Alyria" then
    if isGateRunnableToPursuer(room) then
      Send("run wroth")
    end
  elseif initial and isRune(zone, room) then
    Execute("mapper goto " .. locations["rune"]["west"])
  elseif initial and isNewRigel(zone, room) then
    Execute("mapper goto " .. locations["newrigel"]["north"])
  elseif initial and isXaventry(zone, room) then
    Execute("mapper goto " .. locations["xaventry"]["south"])
  elseif initial and isLowangen(zone, room) then
    Execute("mapper goto " .. locations["lowangen"]["south"])
  elseif initial then
    Note("You don't know how to get there from here.")
  end
  
end

function isGateRunnableToPursuer(room)
  if isRune("Alyria", room) then return true end
  if isXaventry("Alyria", room) then return true end
  if isNewRigel("Alyria", room) then return true end
  if isLowangen("Alyria", room) then return true end
  if isGilvery("Alyria", room) then return true end
  if isDesertThorn("Alyria", room) then return true end
  if room == taverns["travelersretreat"] then return true end
  if room == taverns["tavernoftheboars"] then return true end
  if room == taverns["twinmoons"] then return true end
  if room == taverns["lonelydragon"] then return true end

  return false
end

function getPursuerTarget()
  Send("sayto orc yes")
  Send("nod orc")
end

function cancelGoto()
  Note("You will stop when this leg completes.")
  running_to_pursuer = false
end

function isRune(zone, room)
    return zone == "Towne of Rune" or 
           zone == "Runic Castle" or 
           zone == "Player Homes - Rune" or 
           zone == "Rune Condominiums" or
           zone == "Rune Estates" or 
           zone == "Rune Realty" or 
           zone == "Temple Crypt" or
           zone == "Temple of Sumter" or 
           zone == "Winterborn Mansion" or 
           zone == "Focault Magic Equipment Company" or 
           zone == "Focault's Residence" or
           zone == "Van Pelt's Emporium" or 
           room == locations["rune"]["south"] or
           room == locations["rune"]["east"] or
           room == locations["rune"]["west"]
end

function isSigil(zone, room)
    return zone == "Sigil" or 
           zone == "The Sigilian Stronghold" or
           zone == "Sigil Castle" or
           zone == "Player Homes - Sigil" or 
           zone == "Sigil Condominiums" or 
           zone == "Sigil Realty" or
           room == locations["sigil"]["north"] or
           room == locations["sigil"]["south"]
end

function isNewRigel(zone, room)
    return zone == "The Towne of New Rigel" or 
           zone == "New Rigel Condominiums" or 
           zone == "New Rigel Gardens" or 
           zone == "New Rigel Realty" or
           zone == "Player Homes - New Rigel" or
           room == locations["newrigel"]["north"] or
           room == locations["newrigel"]["south"]
end

function isXaventry(zone, room)
    return zone == "The Towne of Xaventry" or
           zone == "The Xaventry Stronghold" or 
           zone == "Xaventry Condominiums" or 
           zone == "Xaventry Realty" or 
           room == locations["xaventry"]["north"] or
           room == locations["xaventry"]["south"] or
           room == locations["xaventry"]["east"] or
           room == locations["xaventry"]["west"]
end

function isTellerium(zone, room)
    return zone == "Tellerium" or
           zone == "Player Homes - Tellerium" or
           zone == "Tellerium Condominiums" or 
           zone == "Tellerium Realty" or
           room == locations["tellerium"]["north"] or
           room == locations["tellerium"]["south"]
end

function isTempleton(zone, room)
    return zone == "Templeton" or
           zone == "The Templetonian Stronghold" or 
           room == locations["templeton"]["west"]
end

function isLowangen(zone, room)
    return zone == "Lowangen" or 
           room == locations["lowangen"]["south"]
end

function isPiratesCove(zone, room)
    return zone == "Pirate's Cove" or 
           zone == "Pirate's Cove Realty" or
           zone == "Player Homes - Pirates Cove" or 
           room == locations["piratescove"]["north"] or
           room == locations["piratescove"]["south"] or
           room == locations["piratescove"]["east"] or
           room == locations["piratescove"]["west"]
end

function isVospire(zone, room)
    return zone == "Vospire" or
           room == locations["vospire"]["east"] or
           room == locations["vospire"]["west"]
end

function isDiocletian(zone, room)
    return zone == "Palace of Diocletian" or
           room == locations["diocletian"]["south"]
end

function isMaldra(zone, room)
    return zone == "Maldra Keep" or
           room == locations["maldra"]["south"]
end

function isDesertThorn(zone, room)
    return zone == "Desert Thorn" or
           room == locations["thorn"]["east"] or
           room == locations["thorn"]["west"]
end

function isDecara(zone, room)
    return zone == "Towne of Decara" or 
           zone == "Decara Condominiums" or 
           zone == "Decara Realty" or 
           zone == "Player Homes - Decara" or
           room == locations["decara"]["east"]
end

function isVir(zone, room)
    return zone == "Vir" or 
           zone == "Vir Condominiums" or
           room == locations["vir"]["east"]
end

function isGilvery(zone, room)
  return zone == "Gilvery" or
         room == locations["gilvery"]["west"] or
         room == locations["gilvery"]["east"]
end

function isDesertThorn(zone, room)
  return zone == "Desert Thorn" or
         room == locations["desertthorn"]["west"] or
         room == locations["desertthorn"]["east"]
end

function get_gmcp_room()
    local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
    luastmt = "gmcpdata = " .. gmcparg
    assert(loadstring(luastmt or ""))()
end

function checkForUpdates()
  local updater_installed, updater = pcall("required", "updatehelper")

  if not updater_installed then
    ColourNote("red" , "black", "Could not get download 'updatehelper.lua' from github. Get it manually, reinstall, and try again.")
  else
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/goto_aliases.xml" },
    })
  end
end

]]>

</script>

</muclient>
