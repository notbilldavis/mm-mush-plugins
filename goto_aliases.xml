<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="goto_aliases"
   author="Oona"
   id="53d6e7a37b664265be58ab00"
   language="Lua"
   purpose="aliases to goto places you are in"
   save_state="y"
   date_written="2025-03-15 17:23:48"
   requires="4.71"
   version="1.0">

<description trim="y">

<![CDATA[

Aliases to get you where you wanna go. Takes into account your current location.

Auto run to the exit of the city you are in:

 * goto <north|east|south|west|gate>

 Won't do anything if you try to go to an exit that doesn't exist but just gate will
 take you to what the default gate is of that place.

Go to the next logical city when you are outside an exit:

 * goto next

 This is subjective, but mostly obvious. Rune east to New Rigel, west to Xav, etc.

Go to the quest master if there is one:

 * goto qm

Go to the tourist rep if there is one:

 * goto rep

 It will try to say yes to the rep if you are already there.

Go to the crystal quest office in Rune:

 * goto crystal

 If you are already there it will buy the first map for you.
 If you aren't in Rune it will to "run rune"

Go to the orc pursuer in wroth:
  
  * goto pursuer

  Run to the pursuer if you can, there will be some convenient links to click.
  
]]>

</description>

</plugin>

<aliases>

<alias match="^goto[ ]+north$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doNorthGate()</send>
</alias>

<alias match="^goto[ ]+south$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doSouthGate()</send>
</alias>

<alias match="^goto[ ]+west$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doWestGate()</send>
</alias>

<alias match="^goto[ ]+east$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doEastGate()</send>
</alias>

<alias match="^goto[ ]+gate$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doDefaultGate()</send>
</alias>

<alias match="^goto[ ]+next$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doNextCity()</send>
</alias>

<alias match="^goto[ ]+qm$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doQuestMaster()</send>
</alias>

<alias match="^goto[ ]+rep$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doTownRep()</send>
</alias>

<alias match="^goto[ ]+crystal$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doCrystal()</send>
</alias>

<alias match="^goto[ ]+pursuer$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>doPursuer()</send>
</alias>

<alias match="^goto[ ]+cancel$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>cancelGoto()</send>
</alias>

<alias match="^goto[ ]+help$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
    <send>ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID (), 3))</send>
</alias>

<alias match="^run (.*?)$" enabled="y" regexp="y" send_to="12" sequence="100" group="goto_aliases">
  <send>tryRun("%1")</send>
</alias>

</aliases>

<script>

<![CDATA[

require "gmcphelper"

local can_update, update_helper = pcall(require, "updatehelper")
local serializer_installed, serialization_helper = pcall(require, "serializationhelper")

if can_update and not serializer_installed then 
  serializer_installed, serialization_helper = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/serializationhelper.lua")
end

local running_to_pursuer = false
local locations = {}

local alyria_destinations = {
  sepharia = { 
    newrigel = "newrigel", xaventry = "xaventry", avarice = "avarice", desertthorn = "desertthorn", runeforest = "runeforest",
    gilvery = "gilvery", lasler = "lasler", lowangen = "lowangen", mandrake = "mandrake", newkolvir = "newkolvir", rune = "rune",
    towerofart = "towerofart", wroth = "wroth", twinmoons = "twinmoons", hillgiants = "hillgiants", tavernoftheboars = "tavernoftheboars",
    travelersretreat = "travelersretreat", lonelydragon = "lonelydragon", jointmagicconsortium = "jointmagicconsortium",
    toa = "towerofart", thorn = "desertthorn", forest = "runeforest", jmc = "jointmagicconsortium"
  },
  auryn = {
    diocletian = "diocletian", shlarksh = "shlarksh", takhtin = "takhtin", emperorscrossroads = "emperorscrossroads", vospire = "vospire",
    vesuvius = "vesuvius", sigil = "sigil",
  },
  avros = {
    tellerium = "tellerium", templeton = "templeton", dorathon = "dorathon", winton = "winton", frostgiantskeep = "frostgiantskeep",
    aroxa = "aroxa", oilwells = "oilwells", desertoasis = "desertoasis", oasis = "desertoasis", fgk = "frostgiantskeep"
  },
  beltane = {
    keep = "keep", deceit = "deceit", vandemaar = "vandemaar", xalt = "xalt", mulakanathos = "mulakanathos", gorth = "gorth", piratescove = "pc"
  }
}

local underground_destinations = { 
  decara = "decara", decaradocks = "decaradocks", docks = "decaradocks", ariendyth = "ariendyth", smugglersgulch = "smugglersgulch", 
  vir = "vir", hellbent = "hellbent"
}

local sug_destinations = { 
  renn = "renn", hlegmal = "hlegmal", tavern = "hlegmal", goblam = "goblam", grigmorth = "grigmorth", cogworkcity = "cogworkcity",
  cogs = "cogworkcity", waylandersretreat = "waylandersretreat", unreinforcedtunnel = "unreinforcedtunnel", vaatt = "vaatt"
}

local zone_key_map = {
  ["Towne of Rune"] = "rune", ["Runic Castle"] = "rune", ["Player Homes - Rune"] = "rune", ["Rune Condominiums"] = "rune", 
  ["Rune Estates"] = "rune", ["Rune Realty"] = "rune", ["Temple Crypt"] = "rune",["Temple of Sumter"] = "rune", ["Winterborn Mansion"] = "rune", 
  ["Focault Magic Equipment Company"] = "rune", ["Focault's Residence"] = "rune",["Van Pelt's Emporium"] = "rune", ["Sigil"] = "sigil", 
  ["The Sigilian Stronghold"] = "sigil", ["Sigil Castle"] = "sigil", ["Player Homes - Sigil"] = "sigil", ["Sigil Condominiums"] = "sigil", 
  ["Sigil Realty"] = "sigil", ["The Towne of New Rigel"] = "newrigel", ["New Rigel Condominiums"] = "newrigel", ["New Rigel Gardens"] = "newrigel", 
  ["New Rigel Realty"] = "newrigel", ["Player Homes - New Rigel"] = "newrigel", ["The Towne of Xaventry"] = "xaventry",
  ["The Xaventry Stronghold"] = "xaventry", ["Xaventry Condominiums"] = "xaventry", ["Xaventry Realty"] = "xaventry",  ["Tellerium"] = "tellerium",
  ["Player Homes - Tellerium"] = "tellerium", ["Tellerium Condominiums"] = "tellerium", ["Tellerium Realty"] = "tellerium", ["Templeton"] = "templeton",
  ["The Templetonian Stronghold"] = "templeton", ["Pirate's Cove"] = "piratescove", ["Pirate's Cove Realty"] = "piratescove",
  ["Player Homes - Pirates Cove"] = "piratescove", ["Vospire"] = "vospire", ["Palace of Diocletian"] = "diocletian", ["Lowangen"] = "lowangen",
  ["Maldra Keep"] = "maldra", ["Desert Thorn"] = "thorn", ["Towne of Decara"] = "decara", ["Decara Condominiums"] = "decara", ["Decara Realty"] = "decara", 
  ["Player Homes - Decara"] = "decara", ["Vir"] = "vir", ["Vir Condominiums"] = "vir", ["Gilvery"] = "gilvery", ["Rune Forest"] = "runeforest", 
  ["New Kolvir"] = "newkolvir", ["Dungeon Avarice"] = "avarice", ["Mandrake Woods"] = "mandrake", ["Shadow Castle"] = "mandrake", ["Dungeon Wroth"] = "wroth",
  ["A Hill Giant Refuge"] = "hillgiants", ["Tower of Art"] = "toa", ["The Joint Magical Consortium"] = "jmc", ["Emperor's Crossroads"] = "emperorscrossroads",
  ["Shlarksh"] = "shlarksh", ["Mount Vesuvius"] = "vesuvius", ["Takhtin"] = "takhtin", ["The Fishing Village of Dorathon"] = "dorathon",
  ["The Hamlet of Winton"] = "winton", ["Forst Giant's Keep"] = "frostgiantskeep", ["Dungeon Deceit"] = "deceit", ["Vandemaar's Keep"] = "vandemaar",
  ["Xalt, Unseelie Outpost"] = "xalt", ["The Village of Mulakanathos"] = "mulakanathos", ["Gorth"] = "gorth", ["Traveler's Retreat"] = "travelersretreat",
  ["Tavern of the Boars"] = "tavernoftheboars", ["Inn of the Twin Moons"] = "twinmoons", ["The Lonely Dragon Inn"] = "lonelydragon", 
  ["The Indestructible Cenotaphy"] = "cenotaphy",
}

function OnPluginInstall()
  if not serializer_installed then
    ColourNote("black", "red", GetPluginName() .. ": You are missing the following required file(s): lua/serializationhelper.lua")
    EnableTriggerGroup("goto_aliases", false)
    EnableAliasGroup("goto_aliases", false)
    return
  else
    populateLocations()
    EnableTriggerGroup("goto_aliases", true)
    EnableAliasGroup("goto_aliases", true)
  end
end

function OnPluginBroadcast(msg, id, name, text)
  if not serializer_installed then return end
  if (id =="f67c4339ed0591a5b010d05b") then
    if (text == "room.info") then
      if running_to_pursuer then
        handleRunningToPursuer(false)
      end
    end
  end
end

function OnPluginDisconnect()
  if not serializer_installed then return end
  checkForUpdates()
end

function populateLocations()
  setLocation("rune", "sepharia", "10435", "2832529", "2816440", "2809518", "2816440", "31323")
  setLocation("sigil", "auryn", "3881069", "3908670", nil, nil, "3881069", "28450", "27890")
  setLocation("newrigel", "sepharia", "2315135", "2358832", nil, nil, "2315135", "62566", "62036")
  setLocation("xaventry", "sepharia", "2066541", "2105636", "2084947", "2087227", "2105636", "73968", "73100")
  setLocation("tellerium", "avros", "2638058", "2656450", nil, nil, "2638058", "41852", "41790")
  setLocation("templeton", "avros", "47337", nil, nil, "2309054", "2309054", "47421")
  setLocation("piratescove", "beltane", "3288425", "3318326", "3295329", "3304508")
  setLocation("vospire", "auryn", nil, nil, "3765964", "3768246", "3765964")
  setLocation("diocletian", "auryn", nil, "4189387")
  setLocation("lowangen", "sepharia", nil, "2030293")
  setLocation("maldra", "beltane", nil, "3573738", nil, nil, "3573738", "67947")
  setLocation("thorn", "sepharia", nil, nil, "1807082", "1788665")
  setLocation("decara", "underground", nil, nil, "11125213", nil, nil, "116546")
  setLocation("vir", "underground", nil, nil, "12426873")
  setLocation("gilvery", "sepharia", nil, nil, "1880596", "1880584", "1880584")
  setLocation("runeforest", "sepharia", nil, nil, "2625535")
  setLocation("newkolvir", "sepharia", nil, nil, nil, "3324605")
  setLocation("avarice", "sepharia", "2377105")
  setLocation("mandrake", "sepharia", nil, nil, "1900988")
  setLocation("wroth", "sepharia", "1960870")
  setLocation("hillgiants", "sepharia", nil, nil, nil, "2602424")
  setLocation("toa", "sepharia", nil, nil, nil, "1547405")
  setLocation("jmc", "sepharia", "1586161")
  setLocation("emperorscrossroads", "auryn", nil, "4072040")
  setLocation("shlarksh", "auryn", "3823947", "3835453")
  setLocation("vesuvius", "auryn", "3729129")
  setLocation("takhtin", "auryn", nil, "3844854") -- technically beltane but runnable from auryn
  setLocation("dorathon", "avros", nil, "2152729", "2145833", "2143525", "2143525")
  setLocation("winton", "avros", "1964016")
  setLocation("frostgiantskeep", "avros", nil, "1957223")
  setLocation("deceit", "beltane", nil, "3525388")
  setLocation("vandemaar", "beltane", "3925733")
  setLocation("xalt", "beltane", nil, "3831487")
  setLocation("mulakanathos", "beltane", "3900588")
  setLocation("gorth", "beltane", nil, nil, nil, "3875363")
  setLocation("travelersretreat", "sepharia", nil, nil, nil, "2558911")
  setLocation("tavernoftheboars", "sepharia", nil, "2085131")
  setLocation("twinmoons", "sepharia", nil, "1765641")
  setLocation("lonelydragon", "sepharia", nil, "2669134")
  setLocation("teolaven", "auryn", nil, nil, nil, "4058343")
  setLocation("cenotaphy", "beltane", nil, "3916564")
end

function setLocation(key, continent, north, south, east, west, default_gate, qm, rep)
  if default_gate == nil then default_gate = north or south or east or west end
  locations[key] = { north = north, south = south, east = east, west = west, qm = qm, rep = rep, continent = continent, default_gate = default_gate }
end

function getZoneKey()
  get_gmcp_room()
  local zone = gmcpval("zone")
  local room = gmcpval("num")
  if zone == "Alyria" then    
    for key, location in pairs(locations) do
      if location.north == room or location.south == room or location.west == room or location.east == room then
        return key, zone, room
      end
    end
  else
    return zone_key_map[zone], zone, room
  end
  
  return nil, zone, room
end

function getDestinationRoom(destination)
    local zone_key = getZoneKey()
    if (zone_key ~= nil) then
        local room_number = locations[zone_key][destination]
        if (room_number ~= nil) then
            return room_number
        end
    end

    return nil
end

function doLocation(destination)
  local room_number = getDestinationRoom(destination)
  if (room_number ~= nil) then
    Execute("mapper goto " .. room_number)
  else
    Note("There is no " .. destination .. " for this location.")
  end
end

function doNorthGate() -- North Gate
  doLocation("north")    
end

function doSouthGate() -- South Gate
  doLocation("south")
end

function doWestGate() -- West Gate
  doLocation("west")
end

function doEastGate() -- East Gate
  doLocation("east")
end

function doDefaultGate() -- Default Gate
  doLocation("default_gate")
end

function doQuestMaster() -- Quest Master
  local room_number = getDestinationRoom("qm")
  if (room_number ~= nil) then
    local current_room_number = gmcpval("num")
    if (current_room_number == room_number) then
      Send("quest request 'rewarding'")
    else
      Execute("mapper goto " .. room_number)
    end
  else
    Note("There is no quest master for this location.")
  end
end

function doTownRep() -- Daily Lady
  local room_number = getDestinationRoom("rep")
  if (room_number ~= nil) then
    local current_room_number = gmcpval("num")
    if (current_room_number == room_number) then
      Send("sayto representative yes")
    else
      Execute("mapper goto " .. room_number)
    end
  else
    Note("There is no town rep for this location.")
  end
end

function doNextCity() -- Next City
    get_gmcp_room()
    local num = gmcpval("num")

    if num == locations["rune"]["east"] then
      Send("run newrigel")
    elseif num == locations["rune"]["west"] then
      Send("run xaventry")
    elseif num == locations["sigil"]["south"] then
      Send("run diocletian")
    elseif num == locations["sigil"]["north"] then
      Send("run vospire")
    elseif num == locations["piratescove"]["west"] or
           num == locations["piratescove"]["east"] or
           num == locations["piratescove"]["south"] then
      Send("run keep")
    elseif num == locations["newrigel"]["south"] or
           num == locations["xaventry"]["south"] then
      Send("run rune")
    elseif num == locations["newrigel"]["north"] then
      Send("run wroth")
    elseif num == locations["tellerium"]["north"] then
      Send("run templeton")
    elseif num == locations["templeton"]["west"] then
      Send("run tellerium")
    elseif num == locations["diocletian"]["south"] or
           num == locations["vospire"]["east"] then
      Send("run sigil")
    elseif num == locations["vospire"]["west"] then
      Send("run vesuvius")
    elseif num == locations["maldra"]["south"] then
      Send("run pc")
    elseif num == locations["decara"]["east"] then
      Send("run vir")
    elseif num == locations["vir"]["east"] then
      Send("run decara")
    elseif num == "1960870" then -- wroth
      Send("run newrigel")
    else
        Note("You are not in an expected room!")
    end
end

function doCrystal() -- Crystal Quests
  get_gmcp_room()
  local zone = gmcpval("zone")
  local room = gmcpval("num")

  if isRune(zone, room) then
    if room == "10407" then
      Send("shop buy 1")
    else
      Execute("mapper goto 10407")
    end
  elseif zone == "Alyria" then
      Send("run rune")
  elseif isXaventry(zone, room) then
    Execute("mapper goto " .. locations["xaventry"]["south"])
  elseif isNewRigel(zone, room) then
    Execute("mapper goto " .. locations["newrigel"]["south"])
  end
end

function doPursuer() -- Orc Pursuer
  local zone_key, zone, room = getZoneKey() 
  if (zone_key == nil and zone ~= "Alyria") or (locations[zone_key] ~= nil and locations[zone_key].continent == "beltane") then
    Note("You can't get to the orc pursuer from where you are!")
    return
  end
  running_to_pursuer = true
  handleRunningToPursuer(true)
end

function handleRunningToPursuer(initial)
  if not running_to_pursuer then return end

  Note("Running to the Orc Pursuer. Type 'goto cancel' to stop when the current leg completes.")  

  local zone_key, zone, room = getZoneKey() 

  if zone_key == nil then
    if zone == "Alyria" then 
      Note("Get to a gate to start running to the pursuer.")
    else 
      Note("You don't know how to get there from here.")
      running_to_pursuer = false
    end
    return
  end 

  if zone_key == "wroth" then
    if initial and room == "7461" then
      getPursuerTarget()
      running_to_pursuer = false
    elseif room == "7682" then
      Send("enter portal")
      Send("south")
      running_to_pursuer = false
    elseif initial or room == "1960870" then
      Execute("mapper goto 7682")
    end
    return
  end

  local location = locations[zone_key]
  if location == nil then
    Note("You don't know how to get there from here.")
    running_to_pursuer = false
    return
  end

  if location.continent == "sepharia" then
    if zone == "Alyria" then
      Send("run wroth")
    elseif initial then
      if location.default_gate == nil then
        Note("Make your way to the gate outside to run to the pursuer.")
      else
        Execute("mapper goto " .. location.default_gate)
      end
    end
  elseif location.continent == "beltane" then
    Note("You can't get to there from Beltane.")
    running_to_pursuer = false
  else
    if zone == "Alyria" then
      Send("run rune")
    elseif initial then
      if location.default_gate == nil then
        Note("Make your way to the gate outside to run to the pursuer.")
      else
        Execute("mapper goto " .. location.default_gate)
      end
    end
  end  
end

function getPursuerTarget()
  Send("sayto orc yes")
  Send("nod orc")
end

function cancelGoto()
  Note("You will stop when this leg completes.")
  running_to_pursuer = false
end

function tryRun(dest)
  local directions = { 
    w = true, west = true, e = true, east = true, n = true, north = true, s = true, south = true, 
    nw = true, northwest = true, ne = true, northeast = true, se = true, southeast = true, sw = true, southwest = true
  }

  dest = Trim(dest or "")

  if directions[dest] then
    Send("run " .. dest)
    return
  end
  
  get_gmcp_room()
  local plane = gmcpval("coord.name")
  local final_destination = dest
  
  if plane == "Alyria" then
    local zone_key = getZoneKey()
    if zone_key == nil or locations[zone_key] == nil then
      local all_continents = {}
      for k, v in pairs(alyria_destinations.sepharia) do all_continents[k] = v end
      for k, v in pairs(alyria_destinations.auryn) do all_continents[k] = v end
      for k, v in pairs(alyria_destinations.beltane) do all_continents[k] = v end
      for k, v in pairs(alyria_destinations.avros) do all_continents[k] = v end
      final_dest = determineDestination(all_continents, dest)
    else
      final_dest = determineDestination(alyria_destinations[locations[zone_key].continent], dest)
    end    
  elseif plane == "Alyrian Underworld" then
    final_dest = determineDestination(underground_destinations, dest)
  elseif plane == "Sigil Underground" then
    final_dest = determineDestination(sug_destinations, dest)
  end

  if final_dest ~= nil then
    Send("run " .. final_dest)
  end
end

function determineDestination(destinations, input)
  local trimmed = Trim(input:lower())
  local matches, match, matches_count = {}, "", 0

  if destinations[trimmed] ~= nil then
    return destinations[trimmed]
  end

  for shortcut, final_dest in pairs(destinations) do
    if #shortcut >= #trimmed  then
      if shortcut:sub(1, #trimmed) == trimmed then
        if not matches[final_dest] then
          match = final_dest
          matches[final_dest] = true
          matches_count = matches_count + 1
        end
      end
    end
  end

  if matches_count == 0 then return trimmed end
  if matches_count == 1 then return match end

  Tell("Ambiguous destination, choose between: ")
  for amb in pairs(matches) do
    Hyperlink("run " .. amb, "[" .. amb .. "]", "", "white", "black", false)
    Tell(" ")
  end
  Note("")
  
  return nil
end

function get_gmcp_room()
    local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "room.info")
    luastmt = "gmcpdata = " .. gmcparg
    assert(loadstring(luastmt or ""))()
end

function checkForUpdates()
  local updater_installed, updater = pcall(require, "updatehelper")

  if updater_installed then
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/goto_aliases.xml" },
    })
  end
end

]]>

</script>

</muclient>
