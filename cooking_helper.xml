<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="cooking_helper"
   author="Oona"
   id="853dc761db5b4b38b3e42167"
   language="Lua"
   purpose="help with cooking, tracking who eats your stuff, etc"
   save_state="y"
   date_written="2025-05-27 11:28:11"
   requires="4.71"
   version="1.0"
   >

<description trim="y">

</description>

</plugin>

<aliases>
  <alias match="^cooking$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>showCooking()</send>
  </alias>

  <alias match="^cooking[ ]+track (.*?) r:(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>addConsumer("%1", "%2")</send>
  </alias>

  <alias match="^cooking[ ]+clear (.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>clearCooking("%1")</send>
  </alias>

  <alias match="^cooking[ ]+clean(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>cleanCooking("%1")</send>
  </alias>

  <alias match="^cooking[ ]+(npcs|trucks|foodtrucks)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>showFoodTrucks()</send>
  </alias>

  <alias match="^cooking[ ]+containers(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>setContainers("%1")</send>
  </alias>

  <alias match="^cooking[ ]+search$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>search()</send>
  </alias>

  <alias match="^cooking[ ]+getall[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>getAll("%1")</send>
  </alias>

  <alias match="^cooking[ ]+find[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>findIngredient("%1")</send>
  </alias>
</aliases>

<triggers>
  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^(.*?) hungrily gobbles (.*?) down\.$">
    <send>addNpcTracking("%1", "%2")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^The recipe for (.*?)\:$">
    <send>
      EnableTriggerGroup("get_recipe", true)
      clearRecipe()
      recipe_name = "%1"
    </send>
  </trigger>

  <trigger group="get_recipe" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^(\s+)\[(.*?)\]$">
    <send>addToRecipe("%2")</send>
  </trigger>

  <trigger group="get_recipe" keep_evaluating="y" regexp="y" send_to="12" sequence="100" match="^cooking recipe that you do not already have the mark for\.  $">
    <send>
      EnableTriggerGroup("get_recipe", false)
      displayHelperOptions()
    </send>
  </trigger>

  <trigger group="search_recipe" keep_evaluating="n" regexp="y" send_to="14" omit_from_output="y" sequence="100" match="^(.*?) found in(.*?)$">
    <send>found("%1", "%2")</send>
  </trigger>

  <trigger group="search_recipe" keep_evaluating="n" regexp="y" send_to="14" omit_from_output="y" sequence="100" match="^No matching items found\.$">
    <send>notFound()</send>
  </trigger>

  <trigger group="search_recipe" keep_evaluating="n" regexp="y" send_to="14" omit_from_output="y" sequence="100" match="^\.\.\.and more (.*?)\.$">
  </trigger>
</triggers>

<script>

<![CDATA[

recipes = { }
current_recipe = { }
recipe_name = ""
search_count = 0
search_found = { }
containers = { }

set_containers = { "bag", "2.bag", "trunk", "2.trunk" }

npcs = { 
  { name = "Faltel", area = "Templeton", room = "Fox Fur Tavern", num = "45972", race = "Elf" },
  { name = "Shady", area = "Templeton", room = "Fool's Gold Tavern", num = "47034", race = "Human" },
  { name = "Grundel", area = "Templeton", room = "Fisherman's Cafe", num = "46452", race = "Human" },
  { name = "Urkfet", area = "Tellerium", room = "Seagull Tavern", num = "41835", race = "Troll" },
  { name = "Bovel", area = "Tellerium", room = "Peachtree Tavern", num = "41807", race = "Mino" },
  { name = "Miller", area = "Winton", room = "The Trash Compactor Bar and Grill", num = "335857", race = "Human" },
  { name = "Flam", area = "Rune", room = "Flam's Steak House", num = "10722", race = "Dracon" },
  { name = "Friedburg", area = "Lowangen", room = "Friedburg's Training", num = "16090", race = "Human" },
  { name = "Finn", area = "A Hill Giant Refuge", room = "Finn's Tavern", num = "345845", race = "Giant" },
  { name = "a rapacious chemwalker", area = "Dungeon Deceit", room = "", num = "", race = "" },
  { name = "Angus", area = "Smuggler's Gulch", room = "The Far End of the Saloon", num = "9373", race = "Human" },
  { name = "Hungry Harmook", area = "Towne of Decara", room = "An Overflowing Workshop", num = "116305", race = "Llamataur" },
  { name = "Shroom", area = "Towne of Decara", room = "The Tipsy Toadstool", num = "116030", race = "Dracon" },
  { name = "a malnourished girl", area = "Refuge of the Xanai", room = "", num = "", race = "" },
  { name = "Alimenta", area = "Rahdiyr", room = "Alimenta's Tavern", num = "199976", race = "Sidhe" },
  { name = "Sam the Barkeep", area = "Human Outpost", room = "The Bar at the Longbranch", num = "50867", race = "Human" },
  { name = "Cortez, the bartender", area = "Cavhfail", room = "Blue Crescent Tavern", num= "199045", race = "Fey" },
  { name = "a busy bartender", area = "Genauras", room = "", num = "", race = "" },
  { name = "the bartender", area = "A Ghost Town", room = "", num = "", race = "" },
  { name = "Grundy the Bartender", area = "Renn", room = "The Juggling Gopher", num = "78967", race = "halfling" },
  { name = "a bartender with a low-cut top", area = "Hlegmal's Tavern", room = "The Back Bar", num = "385957", race = "Orc" },
  { name = "a famished ghast", area = "Domain of Arbaces", room = "", num = "", race = "" },
}

npc_names = {}

local db

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
  EnsureTables()
  EnsureDb()
end

function OnPluginEnable()
  EnsureTables()
  EnsureDb()
end

function OnPluginConnect()
  EnsureTables()
  EnsureDb()
end

function OnPluginDisconnect()
  local updater_installed, updater = pcall("required", "updatehelper")
  if updated_installer then
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/cooking_helper.xml" },
    })
  end
end

function EnsureTables()
  recipes = { }
  local recipes_text = GetVariable("recipes") or ""
  if recipes_text ~= "" then
    recipes = Deserialize(recipes_text)
  end

  set_containers = { "bag", "2.bag", "trunk", "2.trunk" }
  local containers_text = GetVariable("containers") or ""
  if containers_text ~= "" then
    set_containers = Deserialize(containers_text)
  end

  for _, npc in ipairs(npcs) do
    npc_names[npc.name:lower()] = true
  end
end

function EnsureDb()
  if db == nil then
    local path = GetInfo(66)
    local filename = "recipes.db"

    if (not fileExists(path .. filename)) then
      local res = tryDownloadDatabase(path, filename)

      if (res ~= 0) then
        Note("Try downloading the recipes.db file manually and reinstalling this plugin.")
      end
    end

    db = assert(sqlite3.open(GetInfo(66) .. "recipes.db"))

    db:exec[[
      CREATE TABLE IF NOT EXISTS ingredients (
        id integer not null primary key autoincrement,
        name varchar(255) null,
        area varchar(255) null,
        details varchar(255) null,
        notes varchar(255) null,
        unique (`id`)
      );
    ]]
  end
end

function fileExists(path)
  local f = io.open(path, "r")

  if (f) then
    io.close(f)
    return true
  else
    return false
  end
end

function tryDownloadDatabase(path, filename)
  local http = require "socket.http"
  local url = "https://github.com/notbilldavis/mm-mush-plugins/raw/refs/heads/main/recipes.db"

  Note("Downloading ingredients database...")
  SetStatus ("Downloading recipes.db: " .. url .. " to: " .. path .. filename .. "...")

  local file, dl_res, header = http.request(url)
  if (dl_res ~= 200) then
    ColourNote("red" , "black", "There was an error accessing " .. url .. " - code: " .. dl_res)
    return -1
  end

  Note("Download complete, saving database...")
  SetStatus ("Ready")

  local f, save_res, rescode = io.open(lpath, "wb")
  if (f == nil) then
    ColourNote("red" , "black", "There was an error creating database file: " .. save_res .. " - code: " .. rescode)
    return -1
  end

  f:write(file)
  f:flush()
  f:close()

  ColourNote("green" , "black", "Save complete!")

  return 0
end

function showCooking()
  if #recipes == 0 then
    Note("You are not currently tracking any recipes.")
    Tell("-- type 'cooking track ")
    ColourTell("silver", "black", "<consumer name>")
    Tell(" r:")
    ColourTell("silver", "black", "<recipe name>")
    Note("' to add that person --")
  else
    Note("You are currently tracking the following recipes:")
    for idx, recipe in ipairs(recipes) do
      ColourTell("cyan", "black", " * ")
      ColourTell("white", "black", recipe["name"]:upper())
      ColourNote("cyan", "black", " (" .. #recipe["eaten"] .. " people have eaten)")
      showEaten(recipe["eaten"])
    end
    Note("")
    ColourTell("cyan", "black", " > ")
    Tell("add new with '")
    ColourTell("silver", "black", "cooking track ")
    ColourTell("white", "black", "<consumer name>")
    ColourTell("silver", "black", " r:")
    ColourTell("white", "black", "<recipe name>")
    Note("'")
  end
end

function showEaten(eaten)
  if #eaten == 0 then
    ColourTell("magenta", "black", "  - ")
    ColourNote("white", "black", "no one has eaten this yet!")
  else
    for idx, consumer in ipairs(eaten) do
      ColourTell("magenta", "black", "  - ")
      ColourTell("white", "black", consumer["name"])
      ColourNote("yellow", "black", " (" .. consumer["date"] .. ")")
    end
  end
end

function addConsumer(consumer, name)
  if consumer == nil or consumer == "" or name == nil or name == "" then
    Tell("-- type 'cooking track ")
    ColourTell("silver", "black", "<consumer name>")
    Tell(" r:")
    ColourTell("silver", "black", "<recipe name>")
    Note("' to add that person --")
  else
    local found = false
    consumer = Trim(consumer:gsub("^%l", string.upper))
    name = Trim(name)
    for idx, recipe in ipairs(recipes) do
      if (string.find(string.lower(recipe["name"]), string.lower(name)) ~= nil) then
        local rep = false
        for _, con in ipairs(recipe["eaten"]) do
          if consumer == con["name"] then 
            rep = true
            break
          end
        end
        
        if rep then
          Note("Consumer '" .. consumer .. "' has already eaten '" .. recipe["name"] .. "'")
        else
          Note("Adding '" .. consumer .. "' as a consumer of '" .. recipe["name"] .. "'")
          table.insert(recipe["eaten"], { name = consumer, date = os.date('%Y-%m-%d %H:%M:%S') })
          found = true
          break
        end
      end
    end

    if not found then
      table.insert(recipes, { name = name, eaten = { }})
      addConsumer(consumer, name)
      return
    end

    SetVariable("recipes", Serialize(recipes))
    SaveState()
  end
end

function addNpcTracking(npc, recipe)
  if npc_names[string.lower(npc)] then
    addConsumer(npc, recipe)
  end
end

function clearCooking(name)
  if name == nil or name == "" or name == "all" then
    recipes = {}
  else
    name = Trim(name)
    for idx, recipe in ipairs(recipes) do
      if (string.find(string.lower(recipe["name"]), string.lower(name)) ~= nil) then
        Note("Removing '" .. recipe["name"] .. "' from list of tracked recipes.")
        table.remove(recipes, idx)
        break
      end
    end
  end
  
  SetVariable("recipes", Serialize(recipes))
  SaveState()
end

function cleanCooking(name)
  name = string.lower(Trim(name or ""))
  local cleaned = false
  for idx, recipe in ipairs(recipes) do
    if (name == "" or name == "all" or string.find(string.lower(recipe["name"]), name) ~= nil) then
      local consumer_set = {}
      local cleaned_recipe = { name = recipe["name"], eaten = {}}
      for _, consumer in ipairs(recipe["eaten"]) do
        if not consumer_set[consumer["name"]] then
          consumer_set[consumer["name"]] = true
          table.insert(cleaned_recipe["eaten"], consumer)
        end
      end
      local dupes = #recipe["eaten"] - #cleaned_recipe["eaten"]
      if dupes > 0 then
        Note("Cleaned up '" .. recipe["name"] .. "' removing " .. dupes .. " duplicates.")
        recipes[idx] = cleaned_recipe
        cleaned = true
      end
    end
  end
  
  if cleaned then
    SetVariable("recipes", Serialize(recipes))
    SaveState()
  end
end

function showFoodTrucks()
  Note("NPCs that will eat your food:")
  for _, npc in ipairs(npcs) do
    showFoodTruck(npc.name, npc.area, npc.room, npc.num, npc.race)
  end
end

function showFoodTruck(name, town, room, num, race)
  ColourTell("cyan", "black", " * ")
  ColourTell("white", "black", name)
  ColourTell("yellow", "black", " (" .. town .. ") ")
  if room ~= nil and room ~= "" and num ~= nil and num ~= "" then
    Hyperlink("mapper goto " .. num, "[" .. room .. "]", "", "silver", "black", false)
  end
  if race ~= nil and race ~= "" then
    ColourNote("green", "black", " - " .. race)
  else
    Note("")
  end
end

---------------------
-- current recipe
---------------------

function clearRecipe()
  current_recipe = { }
end

function addToRecipe(ingredient)
  table.insert(current_recipe, ingredient)
end

function displayHelperOptions()
  Note("")
  Hyperlink("cooking search", "[Search for Ingredients]", "", "silver", "black", false)
  Tell(" - ")
  if recipe_name ~= nil and #recipe_name > 0 then
    Hyperlink("cook " .. Trim(recipe_name), "[Cook]", "", "silver", "black", false)
    Tell(" - ")
  end
  ColourTell("silver", "black", "Get from: ")
 
  for _, container in ipairs(set_containers) do
    Hyperlink("cooking getall " .. container, "[" .. container .. "]", "", "silver", "black", false)
    Tell(" ")
  end
end

function setContainers(cont)
  cont = Trim(cont or "")
  if cont ~= "" then
    set_containers = {}
    local split_cont = utils.split(cont, ",")
    for _, container in ipairs(split_cont) do
      table.insert(set_containers, Trim(container))
    end
    SetVariable("containers", Serialize(set_containers))
    SaveState()
    Tell("You have set the following containers: ")
  else
    Tell("You have the following containers set: ")
  end
    
  for i, container in ipairs(set_containers) do
    ColourTell("white", "black", container)
    if i < #set_containers then Tell(", ") end
  end
  Note(".")

  if (cont == "") then
    Note("Use 'cooking containers <containers>' to set this by providing a comma-delimited string.")
  end
end

function search()
  search_count = 0
  search_found = { }
  Note("Searching for ingredients, please wait...")

  EnableTriggerGroup("search_recipe", true)
  for _, i in ipairs(current_recipe) do
    SendNoEcho("inventory search \"" .. i .. "\"")
  end
end

function getAll(container)
  for _, i in ipairs(current_recipe) do
    SendNoEcho("get \"" .. i .. "\" " .. container)
  end

  if recipe_name ~= nil and #recipe_name > 0 then
    Hyperlink("cook " .. Trim(recipe_name), "[Cook]", "", "silver", "black", false)
    Note("")
  end
end

function found(ingredient, location)
  if search_found ~= nil and #search_found > 0 then
    for _, i in ipairs(search_found) do
      if ingredient == i then
        return
      end
    end
  end

  containers[location] = true
  table.insert(search_found, ingredient)
  search_count = search_count + 1  
  checkIfDone()
end

function notFound()
  search_count = search_count + 1
  checkIfDone()
end

function checkIfDone()
  if search_count == #current_recipe then
    DoAfterSpecial(1, "finishSearch()", sendto.script)
  end
end

function finishSearch()
  EnableTriggerGroup("search_recipe", false)
  
  if #search_found ~= #current_recipe then
    ing_set = {}
    for _, ingredient in ipairs(search_found) do
      ing_set[ingredient] = true
    end

    ColourTell("silver", "black", "You need: ")
    for idx, i in ipairs(current_recipe) do
      if not ing_set[i] then
        Hyperlink("cooking find " .. i, "[" .. i .. "]", "Find", "white", "black", false)
        if idx == #current_recipe then
          ColourTell("silver", "black", ".")
        else
          ColourTell("silver", "black", ", ")
        end
      end
    end
    Note("")
  else
    ColourNote("white", "black", "You have all the ingredients required!")
    Tell("You can find them: ")
    for k, v in pairs(containers) do
      ColourTell("cyan", "black", " * ")
      ColourNote("silver", "black", "in" .. k)      
    end

    if recipe_name ~= nil and #recipe_name > 0 then
      Hyperlink("cook " .. Trim(recipe_name), "[Cook]", "", "silver", "black", false)
      Tell(" - ")
    end
    ColourTell("silver", "black", "Get from: ")
  
    for _, container in ipairs(set_containers) do
      Hyperlink("cooking getall " .. container, "[" .. container .. "]", "", "silver", "black", false)
      Tell(" ")
    end
  end
end

function findIngredient(ingredient)
  if db == nil then EnsureDb() end

  Note("Searching DB for '" .. ingredient .. "'")

  for row in db:nrows(string.format("SELECT area, details, notes FROM ingredients WHERE name = '" .. ingredient .. "'")) do
      ColourTell("cyan", "black", " * ")
      if row.area ~= nil and #row.area > 0 then
        ColourTell("white", "black", row.area)
      else
        ColourTell("red", "black", "UNKNOWN")
      end 
      
      ColourTell("silver", "black", " - ")

      if row.details ~= nil and #row.details > 0 then
        ColourTell("white", "black", row.details)
        if row.notes ~= nil and #row.notes > 0 then
          ColourTell("white", "black", "(" .. row.notes .. ")")
        end
      elseif row.notes ~= nil and #row.notes > 0 then
        ColourTell("white", "black", row.notes)
      end

      Note("")
    end
end

---------------------
-- serialization
---------------------

function Serialize(table)
  local function serializeValue(value)
    if type(value) == "table" then
      return Serialize(value)
    elseif type(value) == "string" then
      return string.format("%q", value)
    else
      return tostring(value)
    end
  end

  local result = "{"
  for k, v in pairs(table) do
    local key
    if type(k) == "string" and k:match("^%a[%w_]*$") then
      key = k
    else
      key = "[" .. serializeValue(k) .. "]"
    end
    result = result .. key .. "=" .. serializeValue(v) .. ","
  end
  result = result .. "}"
  return result
end

function Deserialize(serializedTable)
  local func = load("return " .. serializedTable)
  if func then
    return func()
  else
    return nil, "Failed to load string"
  end
end

]]>

</script>

</muclient>