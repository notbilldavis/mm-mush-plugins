<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
  name="tabbed_captures"
  author="Oona"
  id="c97329b91f12ca48d14c3db2"
  language="Lua"
  purpose="capture channels into customizable tabs"
  save_state="y"
  date_written="2025-05-12 12:00:00"
  requires="4.71"
  version="1.0"
>

<description trim="y">

<![CDATA[

A new customizable capture window that lets you have different tabs for different channels. 

Right click the tabs to get a menu for just about anything you need.

Note that there is an "affects" channel that can be used if you have my affects_buttons plugin.
It will capture when you gain or lose an affect you've marked to be broadcasted.

Make sure you have the configuration_minimindow.lua, tabbed_miniwindow.lua, colorshelper.lua,
and tablehelper.lua files in your lua directory or this wont work. gmcphelper.lua too but you 
probably have that already.

Use 'capture update' to check for updates from github.

]]>

</description>

</plugin>

<aliases>
  <alias enabled="y" match="^capture help$" regexp="y" send_to="12" sequence="100">
    <send>doOnHelp()</send>
  </alias>
  <alias match="^capture[ ]+setchar[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>setCharacterName("%1")</send>
  </alias>
  <alias enabled="y" match="^capture debug$" regexp="y" send_to="12" sequence="100">
    <send>doDebug()</send>
  </alias>
  <alias match="^capture[ ]+update$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>checkForUpdates()</send>
  </alias>
</aliases>

<triggers>
  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (says|whispers|communicates) something to (.*?)\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|(say|whisper|communicate)(| to (.+))|(says|whispers|communicates)(| to you))\, \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\'(.+)\' (.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|say(| to (.+))|says(| to you)|communicate(| to (.+))|communicates(| to you))\. \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\'(.+)\' (.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|say(| to (.+))|says(| to you)|communicate(| to (.+))|communicates(| to you))\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You hear (.*?) say through (.+)\: \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" ignore_case="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (shouts|SHOUTS) \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "shout")</send>
  </trigger>

  <trigger enabled="y" ignore_case="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[[0-9]+\] people heard you shout \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "shout")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) tells you \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You tell [^ ]+ \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) impresses upon you \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You impress upon [^ ]+ \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) tells the formation \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "form")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You tell the formation \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "form")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[CLAN Novice Adventurers\] (.*?)\: \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "novice")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[[0-9]+\] Novice clan member(|s) heard you say\, \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "novice")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^AUCTION\: (.*?) has put (.+) up for auction\. Minimum bid is (.+) gp\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "auction")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^AUCTION\: (((.+)\: going (once|twice) (\(no bid received yet\)|going (once|twice) for (.+) gp to (.+))|has been sold to (.+) for (.+) gp|has removed (.+) from the auction queue)|(.+) bids (.+) gp on (.+)|No bids received for (.+)\. Item has been withdrawn)\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "aucverb")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) yells \'(.+)\'$" regexp="y" send_to="14"sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "yell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You yell \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "yell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] alliance member(|s) heard you say\, \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "alliance")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[ALLIED [0-9]+\] (.*?)(| to \[[0-9]+\])\: \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "alliance")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^((.*?) announces\, |A jovial voice tells you\, )\'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "announce")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[[0-9]+\] \((.*?)\)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "archon")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[ARCHON\] (.*?)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "archon")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] clan member(|s) heard you say\, \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?)\: \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has gained class level (.*?)\, total level (.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has gained Archon level (.*?)\:(.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has entered Materia Magica\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has left Materia Magica\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^^\[CLAN\] (.*?) has been slain (.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^^\[CLAN\] (.*?) wins the roll for (.*?)\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) is currently logged in\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "notify")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^Signo(n|ff) at (.+) for (?P&lt;who&gt;.+) detected(.*?)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "notify")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) is paging you\.\.\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^Reason: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="You have paged *" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[TALK(| (.+))\] (.*?)\: \'(.+)\'(| \[[0-9]+\])$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "talk")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[TALK(| (.+))\] \'(.+)\'(| \[[0-9]+\])$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "talk")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?)\@\#(.*?)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "relay")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] people in \#(.*?) heard you relay \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "relay")</send>
  </trigger>

  <trigger enabled="y" name="first_prompt" keep_evaluating="y" match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)) $" regexp="y" send_to="12" sequence="100">
    <send>OnFirstPrompt()</send>
  </trigger>

</triggers>

<script>

<![CDATA[

function ensureRequired(required_name, required_remote_url, should_return)
  local existing_file = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "r")
  if not existing_file then
    local https = require("ssl.https")
    local ltn12 = require("ltn12")
    local response = {}
    local _, dl_res = https.request {
        url = required_remote_url,
        sink = ltn12.sink.table(response)
    }
    if (dl_res == 200) then
      local required_ref_file = table.concat(response):gsub("\r\n", "\n")
      local new_file, res, res_code = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "wb")
      new_file:write(required_ref_file)
      new_file:flush()
      new_file:close()
    end
  end

  if should_return then 
    return pcall(require, required_name)
  end
end

ensureRequired("colorshelper", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/colorshelper.lua", false)
ensureRequired("tabbed_miniwindow", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/tabbed_miniwindow.lua", false)

require "gmcphelper"
require "colorshelper"
require "tabbed_miniwindow"

local GAGS = {
  shout = { 
    "Shop the fine wares at the Alyrian Bazaar", 
    "Hear ye, hear ye, adventurers of", 
    "back from a long absence!" 
  },
  yell = {
    "available in Agatha's Shoppe of Illusions!",
    "A masculine voice yells",
    "Ferry is now docked at",
    "The ship Merdraco be docked at",
    "Step right up, step right up!",
    "If you'd like information on quests, please visit me at the Shrine of St. Wisehart!",
    "Unbreakable, level-scaling weapons for sale in the village's main street, near the Shrine!",
    "Come visit the Crystal Guild's hall near the cemetery",
    "Attention! Get your nefarious wares at the Xaltian Bazaar!"
  },
  say = {
    "[CLAN]"
  },
  tell = {
    "'I don't know any skills in which I could train you.'"
  }
}

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
  EnableTrigger("first_prompt", true)
  PrepareMiniWindow()
end

function OnPluginEnable()
  CHARACTER_NAME = nil
  EnableTrigger("first_prompt", true)
  PrepareMiniWindow()
end

function OnPluginConnect()
  CHARACTER_NAME = nil
  EnableTrigger("first_prompt", true)
  PrepareMiniWindow()
end

function OnPluginClose()
  hideWindow()
end

function OnPluginDisable()
  hideWindow()
end

function OnPluginSaveState()
  saveMiniWindow()
end

function OnPluginDisconnect()
  hideWindow()
  checkForUpdates()
end

function doOnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
end

function OnFirstPrompt()
  EnableTrigger("first_prompt", false)
  Execute("sendgmcp char.base")
end

function setCharacterName(name)
  if name == nil or name == "" then
    Note("Unknown character name, set with 'capture setchar <name>'") 
  else
    CHARACTER_NAME = name
    
    InitializeMiniWindow(name)
  end
end

function OnPluginBroadcast(msg, id, pname, text)
  if id == "f67c4339ed0591a5b010d05b" then
    if text == "char.gecho_notification" then
      captureGlobalEcho()
    elseif (text == "char.base") then
      HandleGmcpCharacterBase()
    end
  end

  if id == "3a8348c0204a529dc99c2ba8" and msg == 1 then
    captureAffects(text)
  end
end

function HandleGmcpCharacterBase()
  if CHARACTER_NAME == nil or CHARACTER_NAME == "" then
    local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char.base")
    luastmt = "gmcpdata = " .. gmcparg
    assert(loadstring(luastmt or ""))()
    local name = gmcpval("name")
    setCharacterName(name)
  end
end

function doCapture(trigger_style_runs, line, type)
  if shouldSkip(type, line) then return end

  captureText("silver", "black", "[".. os.date("%H:%M:%S") .. "] ", type)

  for i = 1, #trigger_style_runs do
    local txt = trigger_style_runs[i].text

    if (string.find(txt, "Novice")) then
      txt = string.gsub(txt, "%[CLAN Novice Adventurers%]", "%[Novice%]")
      txt = string.gsub(txt, "Novice clan members", "Novices")
      txt = string.gsub(txt, "Novice clan member", "Novice")
    end

    if (string.find(txt, "Vandemaar's Magic Mirror")) then
      txt = string.gsub(txt, "^You hear (.+) say through Vandemaar's Magic Mirror:", "%(mirror%) %1:")
    end

    local fgcol = RGBColourToName(trigger_style_runs[i].textcolour)
    local bgcol = RGBColourToName(trigger_style_runs[i].backcolour)

    captureText(fgcol, bgcol, txt, type)
  end

  captureText("silver", "black", "\r\n", type)  
end

function captureText(fgcol, bgcol, txt, type)
  if (not styles) then
    styles = {}
  end

  if (txt == "\r\n") then
    AddStyledLine(type, styles)
    styles = {}
  else
    styles[#styles + 1] = {
      text = txt,
      textcolour = ColourNameToRGB(fgcol),
      backcolour = ColourNameToRGB(bgcol)
    }
  end
end

function shouldSkip(channel, line)
  if GAGS[channel] ~= nil then    
    for i = 1, #GAGS[channel] do
      if string.find(line:lower(), GAGS[channel][i]:lower(), 1, true) then
        return true
      end
    end
  end
  return false
end

function captureAffects(text)
  captureText("silver", "black", "\r\n", "affects")
  captureText("silver", "black", "[".. os.date("%H:%M:%S") .. "] ", "affects")
  captureText("springgreen", "black", "[AFFECTS] ", "affects")
  captureText("white", "black", text, "affects")
  captureText("silver", "black", "\r\n", "affects")
end

function captureGlobalEcho()
  local res, gmcparg = CallPlugin("f67c4339ed0591a5b010d05b", "gmcpval", "char.gecho_notification")
  luastmt = "gmcpdata = " .. gmcparg
  assert(loadstring(luastmt or ""))()
  local msg = gmcpval("gecho_msg")


  if msg ~= nil and #msg > 0 then
    captureText("silver", "black", "\r\n", "announce")
    captureText("silver", "black", "[".. os.date("%H:%M:%S") .. "] ", "announce")

    local aux = strip_crlfs(msg)

    local fg, bg, col, txt
    fg = "silver"
    bg = "black"

    for x in string.gmatch(aux, "|[^|]*") do
      fg, bg, col, txt = colorizeGlobalEcho(x, fg, bg, col, txt)

      if (txt) then
        if (string.find(txt, "|")) then
          for line in string.gmatch(txt, "[^|]*|") do
            line = string.match(line, "(.+)|")
            line = Trim(line or "")

            if (line ~= "") then
              captureText(fg, bg, line, "announce")
            end

            captureText("silver", "black", "\r\n", "announce")
          end

        else
          captureText(fg, bg, txt, "announce")
        end
      end
    end
  end
end

function colorizeGlobalEcho(x, fg, bg, col, txt)
  if (string.find(x, "^|z%d%d%d")) then
    col, txt = string.match(x, "^|z(%d%d%d)(.*)")
    col = RGBColourToName(x256_to_rgb(tonumber(col)))
    if (col) then
      fg = col
    end

  elseif (string.find(x, "^|Z%d%d%d")) then
    col, txt = string.match(x, "^|Z(%d%d%d)(.*)")
    col = RGBColourToName(x256_to_rgb(tonumber(col)))
    if (col) then
      bg = col
    end

  elseif (string.find(x, "^|X")) then
    fg = "silver"
    bg = "black"
    txt = string.match(x, "^|X(.*)")

  elseif (string.find(x, "^|%a")) then
    col, txt = string.match(x, "^|(%a)(.*)")
    col = fg_mm_to_name(col)
    if (col) then
      fg = col
    end

  elseif (string.find(x, "^|%d")) then
    col, txt = string.match(x, "^|(%d)(.*)")
    col = bg_mm_to_name(col)
    if (col) then
      bg = col
    end
  end

  return fg, bg, col, txt
end

function checkForUpdates()
  local updater_installed, updater = ensureRequired("updatehelper", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/updatehelper.lua", true)

  if not updater_installed then
    ColourNote("red" , "black", "Could not download 'updatehelper.lua' from github. Get it manually, reinstall, and try again.")
  else
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/tabbed_captures.xml" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/tabbed_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/tabbed_miniwindow.lua" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/configuration_miniwindow.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/configuration_miniwindow.lua" }
    })
  end
end

]]>

</script>

</muclient>
