<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
  name="tabbed_captures"
  author="Oona"
  id="c97329b91f12ca48d14c3db2"
  language="Lua"
  purpose="capture channels into customizable tabs"
  save_state="y"
  date_written="2025-05-12 12:00:00"
  requires="4.71"
  version="1.0"
>

<description trim="y">

<![CDATA[

A new customizable capture window that lets you have different tabs for different channels. 

Right click the tabs to get a menu for just about anything you need.

Note that there is an "affects" channel that can be used if you have my affects_buttons plugin.
It will capture when you gain or lose an affect you've marked to be broadcasted.

Make sure you have the configuration_minimindow.lua, tabbed_miniwindow.lua, colorshelper.lua,
and tablehelper.lua files in your lua directory or this wont work. gmcphelper.lua too but you 
probably have that already.

Use 'capture update' to check for updates from github.

]]>

</description>

</plugin>

<aliases>
  <alias enabled="y" match="^capture help$" regexp="y" send_to="12" sequence="100" group="tabbed_captures">
    <send>doOnHelp()</send>
  </alias>
  <alias match="^capture[ ]+setchar[ ]+(.*?)$" enabled="y" regexp="y" send_to="12" sequence="100" group="tabbed_captures">
    <send>setCharacterName("%1")</send>
  </alias>
  <alias enabled="y" match="^capture debug$" regexp="y" send_to="12" sequence="100" group="tabbed_captures">
    <send>doDebug()</send>
  </alias>
  <alias enabled="y" match="^capture config$" regexp="y" send_to="12" sequence="100" group="tabbed_captures">
    <send>configure()</send>
  </alias>
  <alias match="^capture[ ]+update$" enabled="y" regexp="y" send_to="12" sequence="100" group="tabbed_captures">
    <send>checkForUpdates()</send>
  </alias>
</aliases>

<triggers>
  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (says|whispers|communicates) something to (.*?)\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|(say|whisper|communicate)(| to (.+))|(says|whispers|communicates)(| to you))\, \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\'(.+)\' (.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|say(| to (.+))|says(| to you)|communicate(| to (.+))|communicates(| to you))\. \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\'(.+)\' (.*?) (ask(| (.+))|asks(| you)|exclaim(| to (.+))|exclaims(| to you)|say(| to (.+))|says(| to you)|communicate(| to (.+))|communicates(| to you))\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You hear (.*?) say through (.+)\: \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "say")</send>
  </trigger>

  <trigger enabled="y" ignore_case="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) (shouts|SHOUTS) \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "shout")</send>
  </trigger>

  <trigger enabled="y" ignore_case="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[[0-9]+\] people heard you shout \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "shout")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) tells you \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You tell [^ ]+ \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) impresses upon you \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You impress upon [^ ]+ \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "tell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^(.*?) tells the formation \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "form")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^You tell the formation \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "form")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[CLAN Novice Adventurers\] (.*?)\: \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "novice")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^\[[0-9]+\] Novice clan member(|s) heard you say\, \'(.+)\'$">
    <send>doCapture(TriggerStyleRuns, "%0", "novice")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^AUCTION\: (.*?) has put (.+) up for auction\. Minimum bid is (.+) gp\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "auction")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" regexp="y" send_to="14" sequence="100" match="^AUCTION\: (((.+)\: going (once|twice) (\(no bid received yet\)|going (once|twice) for (.+) gp to (.+))|has been sold to (.+) for (.+) gp|has removed (.+) from the auction queue)|(.+) bids (.+) gp on (.+)|No bids received for (.+)\. Item has been withdrawn)\.$">
    <send>doCapture(TriggerStyleRuns, "%0", "aucverb")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) yells \'(.+)\'$" regexp="y" send_to="14"sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "yell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You yell \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "yell")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] alliance member(|s) heard you say\, \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "alliance")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[ALLIED [0-9]+\] (.*?)(| to \[[0-9]+\])\: \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "alliance")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^((.*?) announces\, |A jovial voice tells you\, )\'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "announce")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[[0-9]+\] \((.*?)\)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "archon")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[ARCHON\] (.*?)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "archon")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] clan member(|s) heard you say\, \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?)\: \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) gained class level (.*?)\, total level (.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) gained Archon level (.*?)\:(.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has entered Materia Magica\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has left Materia Magica\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) has been slain (.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) wins the roll for (.*?)\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) is no(.*?) away\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>
  
  <trigger enabled="y" keep_evaluating="y" match="^\[CLAN\] (.*?) is now away\. Message\: (.*?)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "clan")</send>
  </trigger>  

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) is currently logged in\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "notify")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^Signo(n|ff) at (.+) for (?P&lt;who&gt;.+) detected(.*?)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "notify")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) is paging you\.\.\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^Reason: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="You have paged *" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "page")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[TALK(| (.+))\] (.*?)\: \'(.+)\'(| \[[0-9]+\])$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "talk")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[TALK(| (.+))\] \'(.+)\'(| \[[0-9]+\])$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "talk")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?)\@\#(.*?)\: (.+)$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "relay")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\[([0-9]+)\] people in \#(.*?) heard you relay \'(.+)\'$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "relay")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^(.*?) the Powers have granted thee a Mark\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "announce")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You have made some progress towards improving your skill in (.*?)\!$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "betters")</send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^You have become more learned at (.*?)\.$" regexp="y" send_to="14" sequence="100">
    <send>doCapture(TriggerStyleRuns, "%0", "betters")</send>
  </trigger>

  <trigger enabled="y" name="first_prompt" keep_evaluating="y" match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)) $" regexp="y" send_to="12" sequence="100">
    <send>OnFirstPrompt()</send>
  </trigger>

</triggers>

<script>

<![CDATA[

local missing_required_files = {}
local can_update, update_helper = pcall(require, "updatehelper")
local config_installed, config_window = pcall(require, "configuration_miniwindow")
local capture_installed, capture_window = pcall(require, "tabbed_miniwindow")
local colors_installed, colors_helper = pcall(require, "colorshelper")
local serializer_installed, serialization_helper = pcall(require, "serializationhelper")
local const_installed, consts = pcall(require, "consthelper")

if can_update and update_helper.UpdateSelf ~= nil then
  local updater_updated = update_helper.UpdateSelf()
  if updater_updated then
    package.loaded["updatehelper"] = nil
    can_update, update_helper = pcall(require, "updatehelper")
  end
end

if can_update then
  if not config_installed then config_installed, config_window = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/configuration_miniwindow.lua") end
  if not capture_installed then capture_installed, capture_window = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/tabbed_miniwindow.lua") end
  if not colors_installed then colors_installed, colors_helper = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/colorshelper.lua") end
  if not serializer_installed then serializer_installed, serialization_helper = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/serializationhelper.lua") end
  if not const_installed then const_installed, consts = update_helper.UpdateAndRequire(GetInfo(56):gsub("\\", "/"), "lua/consthelper.lua") end
end

if not config_installed then table.insert(missing_required_files, "lua/configuration_miniwindow.lua") end
if not capture_installed then table.insert(missing_required_files, "lua/tabbed_miniwindow.lua") end
if not colors_installed then table.insert(missing_required_files, "lua/colorshelper.lua") end
if not serializer_installed then table.insert(missing_required_files, "lua/serializationhelper.lua") end
if not const_installed then table.insert(missing_required_files, "lua/consthelper.lua") end

require "gmcphelper"

local CHARACTER_NAME = nil

function OnPluginInstall() pluginStart() end
function OnPluginEnable() pluginStart() end
function OnPluginConnect() pluginStart() end
function OnPluginClose() pluginStop() end
function OnPluginDisable() pluginStop() end
function OnPluginDisconnect() pluginStop() end

function pluginStart()
  if #missing_required_files > 0 then
    ColourNote("black", "red", GetPluginName() .. ": You are missing the following required file(s): " .. table.concat(missing_required_files, ", "))
    EnableAliasGroup("tabbed_captures", false)
    EnableTrigger("first_prompt", false)
    return
  else
    EnableAliasGroup("tabbed_captures", true)
  end

  CHARACTER_NAME = nil
  EnableTrigger("first_prompt", true)
  capture_window.Prepare()
end

function pluginStop()
  if #missing_required_files > 0 then return end
  if not GetInfo(106) then capture_window.Close() end -- not disconnected
  config_window.Hide()
  if can_update and capture_window.IsAutoUpdateEnabled() then
    checkForUpdates()
  else
    Note("Auto-update for '" .. GetPluginName() .. "' is disabled. Enable it in the plugin configuration to receive updates.")
  end  
end

function OnFirstPrompt()
  EnableTrigger("first_prompt", false)
  Execute("sendgmcp char.base")
end

function setCharacterName(name)
  if name == nil or name == "" then
    Note("Unknown character name, set with 'capture setchar <name>'") 
  else
    CHARACTER_NAME = name
    
    capture_window.Initialize(name)
  end
end

function OnPluginBroadcast(msg, id, pname, text)
  if #missing_required_files > 0 then return end
  if id == "f67c4339ed0591a5b010d05b" then
    if text == "char.gecho_notification" then
      captureGlobalEcho()
    elseif (text == "char.base") then
      if character_name == nil or character_name == "" then
        local character = serialization_helper.GetGmcpValue(text)
        setCharacterName(character.name)
      end
    end
  end

  if id == "3a8348c0204a529dc99c2ba8" and msg == 1 then
    captureAffects(text)
  end
end

function doCapture(trigger_style_runs, line, type)
  if #missing_required_files > 0 then return end
  capture_window.Capture(trigger_style_runs, line, type)
end

function captureAffects(text)
  local style_runs = {
    { text = "[AFFECTS] ", textcolour = "springgreen", backcolour = "black" },
    { text = text, textcolour = "white", backcolour = "black" }
  }

  capture_window.Capture(style_runs, text, "affects")
end

function captureGlobalEcho()
  local msg = Trim(serialization_helper.GetGmcpValue("char.gecho_notification").gecho_msg or "")
  if msg ~= nil and msg ~= "" then

    local aux = strip_crlfs(msg)
    local fg, bg, col, txt = "silver", "black", nil, nil
    
    for x in aux:gmatch("|[^|]*") do
      fg, bg, col, txt = colorizeGlobalEcho(x, fg, bg, col, txt)

      if txt then
        if txt:find("|") then
          for line in txt:gmatch("[^|]*|") do
            line = line:match("(.+)|")
            line = Trim(line or "")

            if (line ~= "") then
              capture_window.Capture({ text = line, textcolour = fg, backcolour = bg }, txt, "announce")
            end
          end

        else
          capture_window.Capture({ text = txt, textcolour = fg, backcolour = bg }, txt, "announce")
        end
      end
    end
  end
end

function colorizeGlobalEcho(x, fg, bg, col, txt)
  if (string.find(x, "^|z%d%d%d")) then
    col, txt = string.match(x, "^|z(%d%d%d)(.*)")
    col = RGBColourToName(x256_to_rgb(tonumber(col)))
    if (col) then
      fg = col
    end

  elseif (string.find(x, "^|Z%d%d%d")) then
    col, txt = string.match(x, "^|Z(%d%d%d)(.*)")
    col = RGBColourToName(x256_to_rgb(tonumber(col)))
    if (col) then
      bg = col
    end

  elseif (string.find(x, "^|X")) then
    fg = "silver"
    bg = "black"
    txt = string.match(x, "^|X(.*)")

  elseif (string.find(x, "^|%a")) then
    col, txt = string.match(x, "^|(%a)(.*)")
    col = fg_mm_to_name(col)
    if (col) then
      fg = col
    end

  elseif (string.find(x, "^|%d")) then
    col, txt = string.match(x, "^|(%d)(.*)")
    col = bg_mm_to_name(col)
    if (col) then
      bg = col
    end
  end

  return fg, bg, col, txt
end

function checkForUpdates()
  if can_update then
    update_helper.Update(GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), "tabbed_captures.xml")
    update_helper.Update(GetInfo(56):gsub("\\", "/"), "lua/tabbed_miniwindow.lua")
    update_helper.Update(GetInfo(56):gsub("\\", "/"), "lua/configuration_miniwindow.lua")
    update_helper.Update(GetInfo(56):gsub("\\", "/"), "lua/serializationhelper.lua")
    update_helper.Update(GetInfo(56):gsub("\\", "/"), "lua/consthelper.lua")
  else
    ColourNote("red", "black", GetPluginName() .. ": UpdateHelper was not found. Make sure updatehelper.lua is in your lua folder.")
  end
end

function configure()
  capture_window.Configure()
end

function doDebug()
  capture_window.DoDebug()
end

]]>

</script>

</muclient>
