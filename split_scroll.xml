<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
  name="split_scroll"
  author="Oona"
  id="f453be8f0a2cd84fb3f9ff8a"
  language="Lua"
  purpose="show a splitter when scrolling to always display the last 25 lines"
  save_state="y"
  date_written="2025-06-01 12:00:00"
  requires="4.71"
  version="1.0"
>

<description trim="y">

<![CDATA[

Does what it says on the tin, when you scroll up in your output window you will
still see the latest 25 or so lines at the bottom so you can go look at stuff
with out needing to worry about new stuff happening without your knowledge.

Click the down arrow button to shoot back down.

Use "split config" to open a window to make some adjustments if things are weird.

The variable count is a magic number you probably need to play with if your split
section isn't going away even at the bottom of the screen. Make it a little higher
and try it out, adjusting as needed.

Make your font the same as what is in your MUSH configuration -> output settings.

Only really tested with my own layout so let me know if it acts weird for you.

Use "split update" to update from github.

]]>

</description>

</plugin>

<aliases>
  <alias match="^split[ ]+config(|ure)$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>Configure()</send>
  </alias>

  <alias match="^split[ ]+debug$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>ShowDebug()</send>
  </alias>

  <alias match="^split[ ]+update$" enabled="y" regexp="y" send_to="12" sequence="100">
    <send>checkForUpdates()</send>
  </alias>
</aliases>

<triggers>
  <trigger enabled="y" name="first_prompt" keep_evaluating="y" match="^(|[^ ]+(.*?))(\&lt;(.+)hp (.+)sp (.+)st\&gt;|\(.+\)) $" regexp="y" send_to="12" sequence="100">
    <send>OnFirstPrompt()</send>
  </trigger>
</triggers>

<script>

<![CDATA[

function tryRequire(required_name, required_remote_url)
  local is_installed, required_ref = pcall(require, required_name)
  if not is_installed then
    local https = require("ssl.https")
    local ltn12 = require("ltn12")
    local response = {}
    local _, dl_res = https.request {
        url = required_remote_url,
        sink = ltn12.sink.table(response)
    }
    if (dl_res == 200) then
      local required_ref_file = table.concat(response):gsub("\r\n", "\n")
      local new_file, res, res_code = io.open(GetInfo(56):gsub("\\", "/") .. "lua/" .. required_name .. ".lua", "wb")
      new_file:write(required_ref_file)
      new_file:flush()
      new_file:close()
      is_installed, required_ref = pcall(require, required_name)
    end
  end

  if not is_installed then
    ColourNote("red" , "black", "Could not get download '".. required_name .. ".lua' from github. Get it manually, reinstall, and try again.")
  end

  return is_installed, required_ref
end

local can_configure, Configuration = tryRequire("configuration_miniwindow", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/configuration_miniwindow.lua")
local WIN = GetPluginID()
local FONT = WIN .. "_font"

local LINE_HEIGHT
local BORDER
local LEFT
local RIGHT
local TOP
local WINDOW_HEIGHT

local SS_CONFIGURATION = {
  BUTTON_X_DISTANCE = 225,
  BUTTON_Y_DISTANCE = 100,
  BUTTON_HEIGHT = 50,
  BUTTON_WIDTH = 50,
  BUTTON_COLOR = ColourNameToRGB("dimgray"),
  ARROW_COLOR = ColourNameToRGB("darkgray"),
  SPLIT_FONT = nil,
  ROW_COUNT = 25,
  VARIABLE_COUNT = 650
}

counter = 0
init = false

function OnPluginInstall()
  Note("-- " .. GetPluginInfo(GetPluginID(), 1) .. ": installed --")
end

function OnPluginClose()
  hideWindow()
end

function OnPluginDisable()
  hideWindow()
end

function doOnHelp()
  ColourNote("silver", "black", world.GetPluginInfo(world.GetPluginID(), 3))
end

function OnFirstPrompt()
  EnableTrigger("first_prompt", false)

  loadSavedData()
  createWindowAndFont()

  init = true
end

function loadSavedData()
  local serialized_config = GetVariable("splitscroll_config") or ""
  if serialized_config == "" then
    local def_font, def_size = GetInfo(20) or "Lucida Console", GetInfo(213) or 10
    SS_CONFIGURATION = {
      BUTTON_X_DISTANCE = 250,
      BUTTON_Y_DISTANCE = 100,
      BUTTON_HEIGHT = 50,
      BUTTON_WIDTH = 50,
      BUTTON_COLOR = ColourNameToRGB("dimgray"),
      ARROW_COLOR = ColourNameToRGB("darkgray"),
      SPLIT_FONT = { name = def_font, size = def_size },
      ROW_COUNT = 15,
      VARIABLE_COUNT = 800
    }
  else
    SS_CONFIGURATION = Deserialize(serialized_config)
  end
end

function createWindowAndFont()
  local font = SS_CONFIGURATION["SPLIT_FONT"]
  
  WindowCreate(WIN, 0, 0, 0, 0, 0, 0, 0)
  WindowFont(WIN, FONT, font.name, font.size)
  
  LINE_HEIGHT = GetInfo(212) --(WindowFontInfo(WIN, FONT, 1) - WindowFontInfo(WIN, FONT, 4) + 1) + 1
  BORDER = GetInfo(277)
  WINDOW_HEIGHT = LINE_HEIGHT * (SS_CONFIGURATION["ROW_COUNT"] + 1) + BORDER + 4

  local bottom = GetPluginVariable("cb6469228f9f7e26129c1ebc", "trbottom") or GetInfo(293)
  TOP =  (bottom - LINE_HEIGHT * (SS_CONFIGURATION["ROW_COUNT"] + 1)) - BORDER  
  LEFT = (GetPluginVariable("cb6469228f9f7e26129c1ebc", "trleft") or GetInfo(290)) - BORDER
  RIGHT =(GetPluginVariable("cb6469228f9f7e26129c1ebc", "trright") or GetInfo(292)) + BORDER + 2
end

function OnPluginTick()
  drawSplitScroll()
end

function drawSplitScroll()
  if not init then return end

  counter = counter + 1
  if counter % 13 == 0 then
    counter = 0
    return
  end

  local scroll = GetInfo(296)
  local total_height = GetLinesInBufferCount() * GetInfo(212)

  if scroll < total_height - SS_CONFIGURATION["VARIABLE_COUNT"] then
    drawLines()

    WindowShow(WIN, true)
  else
    WindowShow(WIN, false)
  end
end

function drawLines()
  WindowCreate(WIN, LEFT, TOP, RIGHT - LEFT, WINDOW_HEIGHT, miniwin.pos_center_all, miniwin.create_absolute_location, ColourNameToRGB("black"))
  WindowRectOp(WIN, miniwin.rect_fill, LEFT, TOP, RIGHT - LEFT, WINDOW_HEIGHT, ColourNameToRGB("black"))
  WindowLine(WIN, 0, 0, RIGHT, 0, ColourNameToRGB("silver"), miniwin.pen_solid, 2)
  WindowAddHotspot(WIN, "textarea", 0, 0, RIGHT - LEFT, WINDOW_HEIGHT, "", "", "OnTextAreaMouseDown", "", "OnTextAreaMouseUp", "", miniwin.cursor_ibeam, 0)
  WindowDragHandler(WIN, "textarea", "OnTextAreaMouseMove", "", 0x10)
  WindowScrollwheelHandler(WIN, "textarea", "OnWheelScroll")
  
  SELECTED_TEXT = ""

  local cnt = 0
  local lines_in_buffer = GetLinesInBufferCount()
  for line = lines_in_buffer - SS_CONFIGURATION["ROW_COUNT"], lines_in_buffer do
    drawLine(line - 1, (cnt * LINE_HEIGHT) + 2)
    cnt = cnt + 1
  end

  drawScrollToBottomButton()
end

function drawScrollToBottomButton()
  local btn_left = RIGHT - SS_CONFIGURATION["BUTTON_X_DISTANCE"]
  local btn_top = WINDOW_HEIGHT - SS_CONFIGURATION["BUTTON_Y_DISTANCE"]
  local btn_right = btn_left + SS_CONFIGURATION["BUTTON_WIDTH"]
  local btn_bottom = btn_top + SS_CONFIGURATION["BUTTON_HEIGHT"]

  WindowRectOp(WIN, miniwin.rect_fill, btn_left, btn_top, btn_right, btn_bottom, SS_CONFIGURATION["BUTTON_COLOR"])

  local centerX = (btn_left + btn_right) / 2
  local point1 = { x = centerX, y = btn_bottom - 10 }
  local point2 = { x = btn_left + 10, y = btn_top + 10 }
  local point3 = { x = btn_right - 10, y = btn_top + 10 }

  local downArrow = string.format("%d,%d,%d,%d,%d,%d", point1.x, point1.y, point2.x, point2.y, point3.x, point3.y)

  WindowPolygon(WIN, downArrow, SS_CONFIGURATION["ARROW_COLOR"], miniwin.pen_solid, 1, SS_CONFIGURATION["ARROW_COLOR"], miniwin.brush_solid, true, false)
  WindowAddHotspot(WIN, "scroll_to_bottom", btn_left, btn_top, btn_right, btn_bottom, "", "", "OnScrollToBottom", "", "", "Scroll to bottom", miniwin.cursor_hand, 0)
end

function drawLine(i, y)
  local x = BORDER + GetInfo(276)
  local style_count = GetLineInfo (i, 11)
  if style_count == nil then 
    WindowText(WIN, FONT, "there was a problem with line " .. i .. ", sorry", x, y, 0, 0, ColourNameToRGB("white"))
    return 
  end
  for s = 1, style_count do
    local fgcol = GetStyleInfo(i, s, 14)
    local bgcol = GetStyleInfo(i, s, 15) or ColourNameToRGB("black")
    local txt = GetStyleInfo(i, s, 1)
    local w = WindowTextWidth(WIN, FONT, txt)

    if bgcol then
      WindowRectOp(WIN, miniwin.rect_fill, x, y, x + w, y + LINE_HEIGHT, bgcol)
    end
    
    WindowText(WIN, FONT, txt, x, y, 0, 0, fgcol)
    x = x + w
  end
end

function OnTextAreaMouseUp(flags, hotspot_id)
  if flags == miniwin.hotspot_got_rh_mouse then
    local menu_items = "Scroll to Bottom | Configure"
    if hasSelection() then menu_items = "Copy Selection | " .. menu_items end
    local result = WindowMenu(WIN, WindowInfo(WIN, 14),  WindowInfo(WIN, 15), menu_items)
    if result == "Scroll to Bottom" then OnScrollToBottom()
    elseif result == "Configure" then Configure()
    elseif result == "Copy Selection" then copySelectedText()
    end
  end
end

function OnScrollToBottom()
  SetScroll(-1, true)
end

function OnWheelScroll(flags, hotspot_id)
  local newPos = GetInfo(296)
  
  if bit.band(flags, miniwin.wheel_scroll_back) ~= 0 then
    newPos = newPos + (LINE_HEIGHT * 3)
  else
    newPos = newPos - (LINE_HEIGHT * 3)
  end

  SetScroll(newPos, true)
end

function showWindow()
  WindowShow(WIN, true)
end

function hideWindow()
  WindowShow(WIN, false)
end

function Configure()
  if can_configure then
    local config = {
      Return_Button = {
        BUTTON_X_DISTANCE = { label = "Button X Distance", type = "number", value = tostring(SS_CONFIGURATION.BUTTON_X_DISTANCE), raw_value = SS_CONFIGURATION.BUTTON_X_DISTANCE, min = 0, max = 800 },
        BUTTON_Y_DISTANCE = { label = "Button Y Distance", type = "number", value = tostring(SS_CONFIGURATION.BUTTON_Y_DISTANCE), raw_value = SS_CONFIGURATION.BUTTON_Y_DISTANCE, min = 0, max = 800 },
        BUTTON_HEIGHT = { label = "Button Height", type = "number", value = tostring(SS_CONFIGURATION.BUTTON_HEIGHT), raw_value = SS_CONFIGURATION.BUTTON_HEIGHT, min = 10, max = 100 },
        BUTTON_WIDTH = { label = "Button Width", type = "number", value = tostring(SS_CONFIGURATION.BUTTON_WIDTH), raw_value = SS_CONFIGURATION.BUTTON_WIDTH, min = 10, max = 100 },
        BUTTON_COLOR = { label = "Button Color", type = "color", value = SS_CONFIGURATION.BUTTON_COLOR, raw_value = SS_CONFIGURATION.BUTTON_COLOR },
        ARROW_COLOR = { label = "Arrow Color", type = "color", value = SS_CONFIGURATION.ARROW_COLOR, raw_value = SS_CONFIGURATION.ARROW_COLOR },
      },
      Split_Options = {
        ROW_COUNT = { label = "Number of Rows", type = "number", value = tostring(SS_CONFIGURATION.ROW_COUNT), raw_value = SS_CONFIGURATION.ROW_COUNT },
        SPLIT_FONT = { label = "Font", type = "font", value = SS_CONFIGURATION.SPLIT_FONT.name .. " (" .. SS_CONFIGURATION.SPLIT_FONT.size .. ")", raw_value = SS_CONFIGURATION.SPLIT_FONT },
        VARIABLE_COUNT = { label = "Variable Count", type = "number", value = SS_CONFIGURATION.VARIABLE_COUNT, raw_value = SS_CONFIGURATION.VARIABLE_COUNT },
      }
    }
    Configuration.Show(config, configureDone)
  else
    Note("Make sure you have the configuration_miniwindow.lua file in your lua folder and reinstall this plugin.")
  end
end

function configureDone(group_id, option_id, config)
  SS_CONFIGURATION[option_id] = config.raw_value
  SetVariable("splitscroll_config", Serialize(SS_CONFIGURATION))
  
  if group_id == "Split_Options" then
    createWindowAndFont()
  end

  drawSplitScroll()
end

function ShowDebug()
  local buffer_count = GetLinesInBufferCount()
  Note("scroll: " .. GetInfo(296))
  Note("last line: " .. buffer_count)
  Note("height: " .. buffer_count * GetInfo(212))
  Note("top: " .. TOP)
  Note("left: " .. LEFT)
  Note("right: " .. RIGHT)
end

function Serialize(table)
  local function serializeValue(value)
    if type(value) == "table" then
      return Serialize(value)
    elseif type(value) == "string" then
      return string.format("%q", value)
    else
      return tostring(value)
    end
  end

  local result = "{"
  for k, v in pairs(table) do
    local key
    if type(k) == "string" and k:match("^%a[%w_]*$") then
      key = k
    else
      key = "[" .. serializeValue(k) .. "]"
    end
    result = result .. key .. "=" .. serializeValue(v) .. ","
  end
  result = result .. "}"
  return result
end

function Deserialize(serializedTable)
  local func = load("return " .. serializedTable)
  if func then
    return func()
  else
    return nil, "Failed to load string"
  end
end

function checkForUpdates()
  local updater_installed, updater = tryRequire("updatehelper", "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/updatehelper.lua")

  if not updater_installed then
    ColourNote("red" , "black", "Could not get download 'updatehelper.lua' from github. Get it manually, reinstall, and try again.")
  else
    updater.Update({
      { local_file = GetPluginInfo(GetPluginID(), 6):gsub("\\", "/"), remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/split_scroll.xml" },
      { local_file = GetInfo(56):gsub("\\", "/") .. "lua/configuration.lua", remote_file = "https://raw.githubusercontent.com/notbilldavis/mm-mush-plugins/refs/heads/main/lua/configuration.lua" }
    })
  end
end

]]>

</script>

</muclient>
